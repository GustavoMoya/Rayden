<?php

/**
 * Base class that represents a row from the 'persona' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Oct  2 02:27:19 2012
 *
 * @package    lib.model.om
 */
abstract class BasePersona extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PersonaPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the apellido field.
	 * @var        string
	 */
	protected $apellido;

	/**
	 * The value for the tipo_documento_id field.
	 * @var        int
	 */
	protected $tipo_documento_id;

	/**
	 * The value for the nro_documento field.
	 * @var        int
	 */
	protected $nro_documento;

	/**
	 * The value for the sexo_id field.
	 * @var        int
	 */
	protected $sexo_id;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the nacionalidad_id field.
	 * @var        int
	 */
	protected $nacionalidad_id;

	/**
	 * The value for the estado_civil_id field.
	 * @var        int
	 */
	protected $estado_civil_id;

	/**
	 * The value for the fecha_nacimiento field.
	 * @var        string
	 */
	protected $fecha_nacimiento;

	/**
	 * The value for the lugar_nacimiento field.
	 * @var        string
	 */
	protected $lugar_nacimiento;

	/**
	 * The value for the observaciones field.
	 * @var        string
	 */
	protected $observaciones;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the created_by_id field.
	 * @var        int
	 */
	protected $created_by_id;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the updated_by_id field.
	 * @var        int
	 */
	protected $updated_by_id;

	/**
	 * The value for the deleted_at field.
	 * @var        string
	 */
	protected $deleted_at;

	/**
	 * The value for the deleted_by_id field.
	 * @var        int
	 */
	protected $deleted_by_id;

	/**
	 * @var        TipoDocumento
	 */
	protected $aTipoDocumento;

	/**
	 * @var        TipoSexo
	 */
	protected $aTipoSexo;

	/**
	 * @var        Nacionalidad
	 */
	protected $aNacionalidad;

	/**
	 * @var        EstadoCivil
	 */
	protected $aEstadoCivil;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUserRelatedByCreatedById;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUserRelatedByUpdatedById;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUserRelatedByDeletedById;

	/**
	 * @var        array Alumno[] Collection to store aggregation of Alumno objects.
	 */
	protected $collAlumnos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlumnos.
	 */
	private $lastAlumnoCriteria = null;

	/**
	 * @var        array DatoAcademico[] Collection to store aggregation of DatoAcademico objects.
	 */
	protected $collDatoAcademicos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDatoAcademicos.
	 */
	private $lastDatoAcademicoCriteria = null;

	/**
	 * @var        array Docente[] Collection to store aggregation of Docente objects.
	 */
	protected $collDocentes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDocentes.
	 */
	private $lastDocenteCriteria = null;

	/**
	 * @var        array Domicilio[] Collection to store aggregation of Domicilio objects.
	 */
	protected $collDomicilios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDomicilios.
	 */
	private $lastDomicilioCriteria = null;

	/**
	 * @var        array Empleo[] Collection to store aggregation of Empleo objects.
	 */
	protected $collEmpleos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpleos.
	 */
	private $lastEmpleoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PersonaPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [apellido] column value.
	 * 
	 * @return     string
	 */
	public function getApellido()
	{
		return $this->apellido;
	}

	/**
	 * Get the [tipo_documento_id] column value.
	 * 
	 * @return     int
	 */
	public function getTipoDocumentoId()
	{
		return $this->tipo_documento_id;
	}

	/**
	 * Get the [nro_documento] column value.
	 * 
	 * @return     int
	 */
	public function getNroDocumento()
	{
		return $this->nro_documento;
	}

	/**
	 * Get the [sexo_id] column value.
	 * 
	 * @return     int
	 */
	public function getSexoId()
	{
		return $this->sexo_id;
	}

	/**
	 * Get the [celular] column value.
	 * 
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [nacionalidad_id] column value.
	 * 
	 * @return     int
	 */
	public function getNacionalidadId()
	{
		return $this->nacionalidad_id;
	}

	/**
	 * Get the [estado_civil_id] column value.
	 * 
	 * @return     int
	 */
	public function getEstadoCivilId()
	{
		return $this->estado_civil_id;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_nacimiento] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaNacimiento($format = 'Y-m-d')
	{
		if ($this->fecha_nacimiento === null) {
			return null;
		}


		if ($this->fecha_nacimiento === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fecha_nacimiento);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_nacimiento, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [lugar_nacimiento] column value.
	 * 
	 * @return     string
	 */
	public function getLugarNacimiento()
	{
		return $this->lugar_nacimiento;
	}

	/**
	 * Get the [observaciones] column value.
	 * 
	 * @return     string
	 */
	public function getObservaciones()
	{
		return $this->observaciones;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by_id] column value.
	 * 
	 * @return     int
	 */
	public function getCreatedById()
	{
		return $this->created_by_id;
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [updated_by_id] column value.
	 * 
	 * @return     int
	 */
	public function getUpdatedById()
	{
		return $this->updated_by_id;
	}

	/**
	 * Get the [optionally formatted] temporal [deleted_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDeletedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->deleted_at === null) {
			return null;
		}


		if ($this->deleted_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->deleted_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->deleted_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [deleted_by_id] column value.
	 * 
	 * @return     int
	 */
	public function getDeletedById()
	{
		return $this->deleted_by_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PersonaPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = PersonaPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [apellido] column.
	 * 
	 * @param      string $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setApellido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellido !== $v) {
			$this->apellido = $v;
			$this->modifiedColumns[] = PersonaPeer::APELLIDO;
		}

		return $this;
	} // setApellido()

	/**
	 * Set the value of [tipo_documento_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setTipoDocumentoId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tipo_documento_id !== $v) {
			$this->tipo_documento_id = $v;
			$this->modifiedColumns[] = PersonaPeer::TIPO_DOCUMENTO_ID;
		}

		if ($this->aTipoDocumento !== null && $this->aTipoDocumento->getId() !== $v) {
			$this->aTipoDocumento = null;
		}

		return $this;
	} // setTipoDocumentoId()

	/**
	 * Set the value of [nro_documento] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setNroDocumento($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nro_documento !== $v) {
			$this->nro_documento = $v;
			$this->modifiedColumns[] = PersonaPeer::NRO_DOCUMENTO;
		}

		return $this;
	} // setNroDocumento()

	/**
	 * Set the value of [sexo_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setSexoId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sexo_id !== $v) {
			$this->sexo_id = $v;
			$this->modifiedColumns[] = PersonaPeer::SEXO_ID;
		}

		if ($this->aTipoSexo !== null && $this->aTipoSexo->getId() !== $v) {
			$this->aTipoSexo = null;
		}

		return $this;
	} // setSexoId()

	/**
	 * Set the value of [celular] column.
	 * 
	 * @param      string $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = PersonaPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = PersonaPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [nacionalidad_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setNacionalidadId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nacionalidad_id !== $v) {
			$this->nacionalidad_id = $v;
			$this->modifiedColumns[] = PersonaPeer::NACIONALIDAD_ID;
		}

		if ($this->aNacionalidad !== null && $this->aNacionalidad->getId() !== $v) {
			$this->aNacionalidad = null;
		}

		return $this;
	} // setNacionalidadId()

	/**
	 * Set the value of [estado_civil_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setEstadoCivilId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->estado_civil_id !== $v) {
			$this->estado_civil_id = $v;
			$this->modifiedColumns[] = PersonaPeer::ESTADO_CIVIL_ID;
		}

		if ($this->aEstadoCivil !== null && $this->aEstadoCivil->getId() !== $v) {
			$this->aEstadoCivil = null;
		}

		return $this;
	} // setEstadoCivilId()

	/**
	 * Sets the value of [fecha_nacimiento] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setFechaNacimiento($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_nacimiento !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_nacimiento !== null && $tmpDt = new DateTime($this->fecha_nacimiento)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha_nacimiento = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PersonaPeer::FECHA_NACIMIENTO;
			}
		} // if either are not null

		return $this;
	} // setFechaNacimiento()

	/**
	 * Set the value of [lugar_nacimiento] column.
	 * 
	 * @param      string $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setLugarNacimiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lugar_nacimiento !== $v) {
			$this->lugar_nacimiento = $v;
			$this->modifiedColumns[] = PersonaPeer::LUGAR_NACIMIENTO;
		}

		return $this;
	} // setLugarNacimiento()

	/**
	 * Set the value of [observaciones] column.
	 * 
	 * @param      string $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setObservaciones($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observaciones !== $v) {
			$this->observaciones = $v;
			$this->modifiedColumns[] = PersonaPeer::OBSERVACIONES;
		}

		return $this;
	} // setObservaciones()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PersonaPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [created_by_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setCreatedById($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->created_by_id !== $v) {
			$this->created_by_id = $v;
			$this->modifiedColumns[] = PersonaPeer::CREATED_BY_ID;
		}

		if ($this->asfGuardUserRelatedByCreatedById !== null && $this->asfGuardUserRelatedByCreatedById->getId() !== $v) {
			$this->asfGuardUserRelatedByCreatedById = null;
		}

		return $this;
	} // setCreatedById()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PersonaPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [updated_by_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setUpdatedById($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->updated_by_id !== $v) {
			$this->updated_by_id = $v;
			$this->modifiedColumns[] = PersonaPeer::UPDATED_BY_ID;
		}

		if ($this->asfGuardUserRelatedByUpdatedById !== null && $this->asfGuardUserRelatedByUpdatedById->getId() !== $v) {
			$this->asfGuardUserRelatedByUpdatedById = null;
		}

		return $this;
	} // setUpdatedById()

	/**
	 * Sets the value of [deleted_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setDeletedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->deleted_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->deleted_at !== null && $tmpDt = new DateTime($this->deleted_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->deleted_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PersonaPeer::DELETED_AT;
			}
		} // if either are not null

		return $this;
	} // setDeletedAt()

	/**
	 * Set the value of [deleted_by_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Persona The current object (for fluent API support)
	 */
	public function setDeletedById($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->deleted_by_id !== $v) {
			$this->deleted_by_id = $v;
			$this->modifiedColumns[] = PersonaPeer::DELETED_BY_ID;
		}

		if ($this->asfGuardUserRelatedByDeletedById !== null && $this->asfGuardUserRelatedByDeletedById->getId() !== $v) {
			$this->asfGuardUserRelatedByDeletedById = null;
		}

		return $this;
	} // setDeletedById()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nombre = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->apellido = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->tipo_documento_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->nro_documento = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->sexo_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->celular = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->nacionalidad_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->estado_civil_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->fecha_nacimiento = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->lugar_nacimiento = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->observaciones = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->created_at = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->created_by_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->updated_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->updated_by_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->deleted_at = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->deleted_by_id = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 19; // 19 = PersonaPeer::NUM_COLUMNS - PersonaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Persona object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTipoDocumento !== null && $this->tipo_documento_id !== $this->aTipoDocumento->getId()) {
			$this->aTipoDocumento = null;
		}
		if ($this->aTipoSexo !== null && $this->sexo_id !== $this->aTipoSexo->getId()) {
			$this->aTipoSexo = null;
		}
		if ($this->aNacionalidad !== null && $this->nacionalidad_id !== $this->aNacionalidad->getId()) {
			$this->aNacionalidad = null;
		}
		if ($this->aEstadoCivil !== null && $this->estado_civil_id !== $this->aEstadoCivil->getId()) {
			$this->aEstadoCivil = null;
		}
		if ($this->asfGuardUserRelatedByCreatedById !== null && $this->created_by_id !== $this->asfGuardUserRelatedByCreatedById->getId()) {
			$this->asfGuardUserRelatedByCreatedById = null;
		}
		if ($this->asfGuardUserRelatedByUpdatedById !== null && $this->updated_by_id !== $this->asfGuardUserRelatedByUpdatedById->getId()) {
			$this->asfGuardUserRelatedByUpdatedById = null;
		}
		if ($this->asfGuardUserRelatedByDeletedById !== null && $this->deleted_by_id !== $this->asfGuardUserRelatedByDeletedById->getId()) {
			$this->asfGuardUserRelatedByDeletedById = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PersonaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTipoDocumento = null;
			$this->aTipoSexo = null;
			$this->aNacionalidad = null;
			$this->aEstadoCivil = null;
			$this->asfGuardUserRelatedByCreatedById = null;
			$this->asfGuardUserRelatedByUpdatedById = null;
			$this->asfGuardUserRelatedByDeletedById = null;
			$this->collAlumnos = null;
			$this->lastAlumnoCriteria = null;

			$this->collDatoAcademicos = null;
			$this->lastDatoAcademicoCriteria = null;

			$this->collDocentes = null;
			$this->lastDocenteCriteria = null;

			$this->collDomicilios = null;
			$this->lastDomicilioCriteria = null;

			$this->collEmpleos = null;
			$this->lastEmpleoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePersona:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PersonaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePersona:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePersona:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(PersonaPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(PersonaPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePersona:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PersonaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTipoDocumento !== null) {
				if ($this->aTipoDocumento->isModified() || $this->aTipoDocumento->isNew()) {
					$affectedRows += $this->aTipoDocumento->save($con);
				}
				$this->setTipoDocumento($this->aTipoDocumento);
			}

			if ($this->aTipoSexo !== null) {
				if ($this->aTipoSexo->isModified() || $this->aTipoSexo->isNew()) {
					$affectedRows += $this->aTipoSexo->save($con);
				}
				$this->setTipoSexo($this->aTipoSexo);
			}

			if ($this->aNacionalidad !== null) {
				if ($this->aNacionalidad->isModified() || $this->aNacionalidad->isNew()) {
					$affectedRows += $this->aNacionalidad->save($con);
				}
				$this->setNacionalidad($this->aNacionalidad);
			}

			if ($this->aEstadoCivil !== null) {
				if ($this->aEstadoCivil->isModified() || $this->aEstadoCivil->isNew()) {
					$affectedRows += $this->aEstadoCivil->save($con);
				}
				$this->setEstadoCivil($this->aEstadoCivil);
			}

			if ($this->asfGuardUserRelatedByCreatedById !== null) {
				if ($this->asfGuardUserRelatedByCreatedById->isModified() || $this->asfGuardUserRelatedByCreatedById->isNew()) {
					$affectedRows += $this->asfGuardUserRelatedByCreatedById->save($con);
				}
				$this->setsfGuardUserRelatedByCreatedById($this->asfGuardUserRelatedByCreatedById);
			}

			if ($this->asfGuardUserRelatedByUpdatedById !== null) {
				if ($this->asfGuardUserRelatedByUpdatedById->isModified() || $this->asfGuardUserRelatedByUpdatedById->isNew()) {
					$affectedRows += $this->asfGuardUserRelatedByUpdatedById->save($con);
				}
				$this->setsfGuardUserRelatedByUpdatedById($this->asfGuardUserRelatedByUpdatedById);
			}

			if ($this->asfGuardUserRelatedByDeletedById !== null) {
				if ($this->asfGuardUserRelatedByDeletedById->isModified() || $this->asfGuardUserRelatedByDeletedById->isNew()) {
					$affectedRows += $this->asfGuardUserRelatedByDeletedById->save($con);
				}
				$this->setsfGuardUserRelatedByDeletedById($this->asfGuardUserRelatedByDeletedById);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PersonaPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PersonaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PersonaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAlumnos !== null) {
				foreach ($this->collAlumnos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDatoAcademicos !== null) {
				foreach ($this->collDatoAcademicos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDocentes !== null) {
				foreach ($this->collDocentes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDomicilios !== null) {
				foreach ($this->collDomicilios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpleos !== null) {
				foreach ($this->collEmpleos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTipoDocumento !== null) {
				if (!$this->aTipoDocumento->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTipoDocumento->getValidationFailures());
				}
			}

			if ($this->aTipoSexo !== null) {
				if (!$this->aTipoSexo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTipoSexo->getValidationFailures());
				}
			}

			if ($this->aNacionalidad !== null) {
				if (!$this->aNacionalidad->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aNacionalidad->getValidationFailures());
				}
			}

			if ($this->aEstadoCivil !== null) {
				if (!$this->aEstadoCivil->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstadoCivil->getValidationFailures());
				}
			}

			if ($this->asfGuardUserRelatedByCreatedById !== null) {
				if (!$this->asfGuardUserRelatedByCreatedById->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUserRelatedByCreatedById->getValidationFailures());
				}
			}

			if ($this->asfGuardUserRelatedByUpdatedById !== null) {
				if (!$this->asfGuardUserRelatedByUpdatedById->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUserRelatedByUpdatedById->getValidationFailures());
				}
			}

			if ($this->asfGuardUserRelatedByDeletedById !== null) {
				if (!$this->asfGuardUserRelatedByDeletedById->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUserRelatedByDeletedById->getValidationFailures());
				}
			}


			if (($retval = PersonaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collAlumnos !== null) {
					foreach ($this->collAlumnos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDatoAcademicos !== null) {
					foreach ($this->collDatoAcademicos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDocentes !== null) {
					foreach ($this->collDocentes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDomicilios !== null) {
					foreach ($this->collDomicilios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpleos !== null) {
					foreach ($this->collEmpleos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PersonaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNombre();
				break;
			case 2:
				return $this->getApellido();
				break;
			case 3:
				return $this->getTipoDocumentoId();
				break;
			case 4:
				return $this->getNroDocumento();
				break;
			case 5:
				return $this->getSexoId();
				break;
			case 6:
				return $this->getCelular();
				break;
			case 7:
				return $this->getEmail();
				break;
			case 8:
				return $this->getNacionalidadId();
				break;
			case 9:
				return $this->getEstadoCivilId();
				break;
			case 10:
				return $this->getFechaNacimiento();
				break;
			case 11:
				return $this->getLugarNacimiento();
				break;
			case 12:
				return $this->getObservaciones();
				break;
			case 13:
				return $this->getCreatedAt();
				break;
			case 14:
				return $this->getCreatedById();
				break;
			case 15:
				return $this->getUpdatedAt();
				break;
			case 16:
				return $this->getUpdatedById();
				break;
			case 17:
				return $this->getDeletedAt();
				break;
			case 18:
				return $this->getDeletedById();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PersonaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNombre(),
			$keys[2] => $this->getApellido(),
			$keys[3] => $this->getTipoDocumentoId(),
			$keys[4] => $this->getNroDocumento(),
			$keys[5] => $this->getSexoId(),
			$keys[6] => $this->getCelular(),
			$keys[7] => $this->getEmail(),
			$keys[8] => $this->getNacionalidadId(),
			$keys[9] => $this->getEstadoCivilId(),
			$keys[10] => $this->getFechaNacimiento(),
			$keys[11] => $this->getLugarNacimiento(),
			$keys[12] => $this->getObservaciones(),
			$keys[13] => $this->getCreatedAt(),
			$keys[14] => $this->getCreatedById(),
			$keys[15] => $this->getUpdatedAt(),
			$keys[16] => $this->getUpdatedById(),
			$keys[17] => $this->getDeletedAt(),
			$keys[18] => $this->getDeletedById(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PersonaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNombre($value);
				break;
			case 2:
				$this->setApellido($value);
				break;
			case 3:
				$this->setTipoDocumentoId($value);
				break;
			case 4:
				$this->setNroDocumento($value);
				break;
			case 5:
				$this->setSexoId($value);
				break;
			case 6:
				$this->setCelular($value);
				break;
			case 7:
				$this->setEmail($value);
				break;
			case 8:
				$this->setNacionalidadId($value);
				break;
			case 9:
				$this->setEstadoCivilId($value);
				break;
			case 10:
				$this->setFechaNacimiento($value);
				break;
			case 11:
				$this->setLugarNacimiento($value);
				break;
			case 12:
				$this->setObservaciones($value);
				break;
			case 13:
				$this->setCreatedAt($value);
				break;
			case 14:
				$this->setCreatedById($value);
				break;
			case 15:
				$this->setUpdatedAt($value);
				break;
			case 16:
				$this->setUpdatedById($value);
				break;
			case 17:
				$this->setDeletedAt($value);
				break;
			case 18:
				$this->setDeletedById($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PersonaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNombre($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setApellido($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTipoDocumentoId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNroDocumento($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setSexoId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCelular($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setNacionalidadId($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setEstadoCivilId($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFechaNacimiento($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setLugarNacimiento($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setObservaciones($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCreatedAt($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCreatedById($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setUpdatedAt($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setUpdatedById($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDeletedAt($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDeletedById($arr[$keys[18]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PersonaPeer::DATABASE_NAME);

		if ($this->isColumnModified(PersonaPeer::ID)) $criteria->add(PersonaPeer::ID, $this->id);
		if ($this->isColumnModified(PersonaPeer::NOMBRE)) $criteria->add(PersonaPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(PersonaPeer::APELLIDO)) $criteria->add(PersonaPeer::APELLIDO, $this->apellido);
		if ($this->isColumnModified(PersonaPeer::TIPO_DOCUMENTO_ID)) $criteria->add(PersonaPeer::TIPO_DOCUMENTO_ID, $this->tipo_documento_id);
		if ($this->isColumnModified(PersonaPeer::NRO_DOCUMENTO)) $criteria->add(PersonaPeer::NRO_DOCUMENTO, $this->nro_documento);
		if ($this->isColumnModified(PersonaPeer::SEXO_ID)) $criteria->add(PersonaPeer::SEXO_ID, $this->sexo_id);
		if ($this->isColumnModified(PersonaPeer::CELULAR)) $criteria->add(PersonaPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(PersonaPeer::EMAIL)) $criteria->add(PersonaPeer::EMAIL, $this->email);
		if ($this->isColumnModified(PersonaPeer::NACIONALIDAD_ID)) $criteria->add(PersonaPeer::NACIONALIDAD_ID, $this->nacionalidad_id);
		if ($this->isColumnModified(PersonaPeer::ESTADO_CIVIL_ID)) $criteria->add(PersonaPeer::ESTADO_CIVIL_ID, $this->estado_civil_id);
		if ($this->isColumnModified(PersonaPeer::FECHA_NACIMIENTO)) $criteria->add(PersonaPeer::FECHA_NACIMIENTO, $this->fecha_nacimiento);
		if ($this->isColumnModified(PersonaPeer::LUGAR_NACIMIENTO)) $criteria->add(PersonaPeer::LUGAR_NACIMIENTO, $this->lugar_nacimiento);
		if ($this->isColumnModified(PersonaPeer::OBSERVACIONES)) $criteria->add(PersonaPeer::OBSERVACIONES, $this->observaciones);
		if ($this->isColumnModified(PersonaPeer::CREATED_AT)) $criteria->add(PersonaPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(PersonaPeer::CREATED_BY_ID)) $criteria->add(PersonaPeer::CREATED_BY_ID, $this->created_by_id);
		if ($this->isColumnModified(PersonaPeer::UPDATED_AT)) $criteria->add(PersonaPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(PersonaPeer::UPDATED_BY_ID)) $criteria->add(PersonaPeer::UPDATED_BY_ID, $this->updated_by_id);
		if ($this->isColumnModified(PersonaPeer::DELETED_AT)) $criteria->add(PersonaPeer::DELETED_AT, $this->deleted_at);
		if ($this->isColumnModified(PersonaPeer::DELETED_BY_ID)) $criteria->add(PersonaPeer::DELETED_BY_ID, $this->deleted_by_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PersonaPeer::DATABASE_NAME);

		$criteria->add(PersonaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Persona (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNombre($this->nombre);

		$copyObj->setApellido($this->apellido);

		$copyObj->setTipoDocumentoId($this->tipo_documento_id);

		$copyObj->setNroDocumento($this->nro_documento);

		$copyObj->setSexoId($this->sexo_id);

		$copyObj->setCelular($this->celular);

		$copyObj->setEmail($this->email);

		$copyObj->setNacionalidadId($this->nacionalidad_id);

		$copyObj->setEstadoCivilId($this->estado_civil_id);

		$copyObj->setFechaNacimiento($this->fecha_nacimiento);

		$copyObj->setLugarNacimiento($this->lugar_nacimiento);

		$copyObj->setObservaciones($this->observaciones);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setCreatedById($this->created_by_id);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setUpdatedById($this->updated_by_id);

		$copyObj->setDeletedAt($this->deleted_at);

		$copyObj->setDeletedById($this->deleted_by_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAlumnos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlumno($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDatoAcademicos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDatoAcademico($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDocentes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDocente($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDomicilios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDomicilio($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpleos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpleo($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Persona Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PersonaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PersonaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a TipoDocumento object.
	 *
	 * @param      TipoDocumento $v
	 * @return     Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTipoDocumento(TipoDocumento $v = null)
	{
		if ($v === null) {
			$this->setTipoDocumentoId(NULL);
		} else {
			$this->setTipoDocumentoId($v->getId());
		}

		$this->aTipoDocumento = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TipoDocumento object, it will not be re-added.
		if ($v !== null) {
			$v->addPersona($this);
		}

		return $this;
	}


	/**
	 * Get the associated TipoDocumento object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TipoDocumento The associated TipoDocumento object.
	 * @throws     PropelException
	 */
	public function getTipoDocumento(PropelPDO $con = null)
	{
		if ($this->aTipoDocumento === null && ($this->tipo_documento_id !== null)) {
			$this->aTipoDocumento = TipoDocumentoPeer::retrieveByPk($this->tipo_documento_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTipoDocumento->addPersonas($this);
			 */
		}
		return $this->aTipoDocumento;
	}

	/**
	 * Declares an association between this object and a TipoSexo object.
	 *
	 * @param      TipoSexo $v
	 * @return     Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTipoSexo(TipoSexo $v = null)
	{
		if ($v === null) {
			$this->setSexoId(NULL);
		} else {
			$this->setSexoId($v->getId());
		}

		$this->aTipoSexo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TipoSexo object, it will not be re-added.
		if ($v !== null) {
			$v->addPersona($this);
		}

		return $this;
	}


	/**
	 * Get the associated TipoSexo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TipoSexo The associated TipoSexo object.
	 * @throws     PropelException
	 */
	public function getTipoSexo(PropelPDO $con = null)
	{
		if ($this->aTipoSexo === null && ($this->sexo_id !== null)) {
			$this->aTipoSexo = TipoSexoPeer::retrieveByPk($this->sexo_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTipoSexo->addPersonas($this);
			 */
		}
		return $this->aTipoSexo;
	}

	/**
	 * Declares an association between this object and a Nacionalidad object.
	 *
	 * @param      Nacionalidad $v
	 * @return     Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setNacionalidad(Nacionalidad $v = null)
	{
		if ($v === null) {
			$this->setNacionalidadId(NULL);
		} else {
			$this->setNacionalidadId($v->getId());
		}

		$this->aNacionalidad = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Nacionalidad object, it will not be re-added.
		if ($v !== null) {
			$v->addPersona($this);
		}

		return $this;
	}


	/**
	 * Get the associated Nacionalidad object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Nacionalidad The associated Nacionalidad object.
	 * @throws     PropelException
	 */
	public function getNacionalidad(PropelPDO $con = null)
	{
		if ($this->aNacionalidad === null && ($this->nacionalidad_id !== null)) {
			$this->aNacionalidad = NacionalidadPeer::retrieveByPk($this->nacionalidad_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aNacionalidad->addPersonas($this);
			 */
		}
		return $this->aNacionalidad;
	}

	/**
	 * Declares an association between this object and a EstadoCivil object.
	 *
	 * @param      EstadoCivil $v
	 * @return     Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstadoCivil(EstadoCivil $v = null)
	{
		if ($v === null) {
			$this->setEstadoCivilId(NULL);
		} else {
			$this->setEstadoCivilId($v->getId());
		}

		$this->aEstadoCivil = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the EstadoCivil object, it will not be re-added.
		if ($v !== null) {
			$v->addPersona($this);
		}

		return $this;
	}


	/**
	 * Get the associated EstadoCivil object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     EstadoCivil The associated EstadoCivil object.
	 * @throws     PropelException
	 */
	public function getEstadoCivil(PropelPDO $con = null)
	{
		if ($this->aEstadoCivil === null && ($this->estado_civil_id !== null)) {
			$this->aEstadoCivil = EstadoCivilPeer::retrieveByPk($this->estado_civil_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEstadoCivil->addPersonas($this);
			 */
		}
		return $this->aEstadoCivil;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUserRelatedByCreatedById(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setCreatedById(NULL);
		} else {
			$this->setCreatedById($v->getId());
		}

		$this->asfGuardUserRelatedByCreatedById = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addPersonaRelatedByCreatedById($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUserRelatedByCreatedById(PropelPDO $con = null)
	{
		if ($this->asfGuardUserRelatedByCreatedById === null && ($this->created_by_id !== null)) {
			$this->asfGuardUserRelatedByCreatedById = sfGuardUserPeer::retrieveByPk($this->created_by_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUserRelatedByCreatedById->addPersonasRelatedByCreatedById($this);
			 */
		}
		return $this->asfGuardUserRelatedByCreatedById;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUserRelatedByUpdatedById(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setUpdatedById(NULL);
		} else {
			$this->setUpdatedById($v->getId());
		}

		$this->asfGuardUserRelatedByUpdatedById = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addPersonaRelatedByUpdatedById($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUserRelatedByUpdatedById(PropelPDO $con = null)
	{
		if ($this->asfGuardUserRelatedByUpdatedById === null && ($this->updated_by_id !== null)) {
			$this->asfGuardUserRelatedByUpdatedById = sfGuardUserPeer::retrieveByPk($this->updated_by_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUserRelatedByUpdatedById->addPersonasRelatedByUpdatedById($this);
			 */
		}
		return $this->asfGuardUserRelatedByUpdatedById;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     Persona The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUserRelatedByDeletedById(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setDeletedById(NULL);
		} else {
			$this->setDeletedById($v->getId());
		}

		$this->asfGuardUserRelatedByDeletedById = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addPersonaRelatedByDeletedById($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUserRelatedByDeletedById(PropelPDO $con = null)
	{
		if ($this->asfGuardUserRelatedByDeletedById === null && ($this->deleted_by_id !== null)) {
			$this->asfGuardUserRelatedByDeletedById = sfGuardUserPeer::retrieveByPk($this->deleted_by_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUserRelatedByDeletedById->addPersonasRelatedByDeletedById($this);
			 */
		}
		return $this->asfGuardUserRelatedByDeletedById;
	}

	/**
	 * Clears out the collAlumnos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlumnos()
	 */
	public function clearAlumnos()
	{
		$this->collAlumnos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlumnos collection (array).
	 *
	 * By default this just sets the collAlumnos collection to an empty array (like clearcollAlumnos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlumnos()
	{
		$this->collAlumnos = array();
	}

	/**
	 * Gets an array of Alumno objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Persona has previously been saved, it will retrieve
	 * related Alumnos from storage. If this Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Alumno[]
	 * @throws     PropelException
	 */
	public function getAlumnos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnos === null) {
			if ($this->isNew()) {
			   $this->collAlumnos = array();
			} else {

				$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

				AlumnoPeer::addSelectColumns($criteria);
				$this->collAlumnos = AlumnoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

				AlumnoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlumnoCriteria) || !$this->lastAlumnoCriteria->equals($criteria)) {
					$this->collAlumnos = AlumnoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlumnoCriteria = $criteria;
		return $this->collAlumnos;
	}

	/**
	 * Returns the number of related Alumno objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Alumno objects.
	 * @throws     PropelException
	 */
	public function countAlumnos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlumnos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

				$count = AlumnoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

				if (!isset($this->lastAlumnoCriteria) || !$this->lastAlumnoCriteria->equals($criteria)) {
					$count = AlumnoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlumnos);
				}
			} else {
				$count = count($this->collAlumnos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Alumno object to this object
	 * through the Alumno foreign key attribute.
	 *
	 * @param      Alumno $l Alumno
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlumno(Alumno $l)
	{
		if ($this->collAlumnos === null) {
			$this->initAlumnos();
		}
		if (!in_array($l, $this->collAlumnos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlumnos, $l);
			$l->setPersona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Alumnos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getAlumnosJoinsfGuardUserRelatedByCreatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnos === null) {
			if ($this->isNew()) {
				$this->collAlumnos = array();
			} else {

				$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

				$this->collAlumnos = AlumnoPeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastAlumnoCriteria) || !$this->lastAlumnoCriteria->equals($criteria)) {
				$this->collAlumnos = AlumnoPeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlumnoCriteria = $criteria;

		return $this->collAlumnos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Alumnos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getAlumnosJoinsfGuardUserRelatedByUpdatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnos === null) {
			if ($this->isNew()) {
				$this->collAlumnos = array();
			} else {

				$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

				$this->collAlumnos = AlumnoPeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastAlumnoCriteria) || !$this->lastAlumnoCriteria->equals($criteria)) {
				$this->collAlumnos = AlumnoPeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlumnoCriteria = $criteria;

		return $this->collAlumnos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Alumnos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getAlumnosJoinsfGuardUserRelatedByDeletedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnos === null) {
			if ($this->isNew()) {
				$this->collAlumnos = array();
			} else {

				$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

				$this->collAlumnos = AlumnoPeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlumnoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastAlumnoCriteria) || !$this->lastAlumnoCriteria->equals($criteria)) {
				$this->collAlumnos = AlumnoPeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlumnoCriteria = $criteria;

		return $this->collAlumnos;
	}

	/**
	 * Clears out the collDatoAcademicos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDatoAcademicos()
	 */
	public function clearDatoAcademicos()
	{
		$this->collDatoAcademicos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDatoAcademicos collection (array).
	 *
	 * By default this just sets the collDatoAcademicos collection to an empty array (like clearcollDatoAcademicos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDatoAcademicos()
	{
		$this->collDatoAcademicos = array();
	}

	/**
	 * Gets an array of DatoAcademico objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Persona has previously been saved, it will retrieve
	 * related DatoAcademicos from storage. If this Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DatoAcademico[]
	 * @throws     PropelException
	 */
	public function getDatoAcademicos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicos === null) {
			if ($this->isNew()) {
			   $this->collDatoAcademicos = array();
			} else {

				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				DatoAcademicoPeer::addSelectColumns($criteria);
				$this->collDatoAcademicos = DatoAcademicoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				DatoAcademicoPeer::addSelectColumns($criteria);
				if (!isset($this->lastDatoAcademicoCriteria) || !$this->lastDatoAcademicoCriteria->equals($criteria)) {
					$this->collDatoAcademicos = DatoAcademicoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDatoAcademicoCriteria = $criteria;
		return $this->collDatoAcademicos;
	}

	/**
	 * Returns the number of related DatoAcademico objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DatoAcademico objects.
	 * @throws     PropelException
	 */
	public function countDatoAcademicos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDatoAcademicos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				$count = DatoAcademicoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				if (!isset($this->lastDatoAcademicoCriteria) || !$this->lastDatoAcademicoCriteria->equals($criteria)) {
					$count = DatoAcademicoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDatoAcademicos);
				}
			} else {
				$count = count($this->collDatoAcademicos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DatoAcademico object to this object
	 * through the DatoAcademico foreign key attribute.
	 *
	 * @param      DatoAcademico $l DatoAcademico
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDatoAcademico(DatoAcademico $l)
	{
		if ($this->collDatoAcademicos === null) {
			$this->initDatoAcademicos();
		}
		if (!in_array($l, $this->collDatoAcademicos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDatoAcademicos, $l);
			$l->setPersona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related DatoAcademicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDatoAcademicosJoinTipoTitulo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicos === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicos = array();
			} else {

				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinTipoTitulo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDatoAcademicoCriteria) || !$this->lastDatoAcademicoCriteria->equals($criteria)) {
				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinTipoTitulo($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoCriteria = $criteria;

		return $this->collDatoAcademicos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related DatoAcademicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDatoAcademicosJoinNacionalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicos === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicos = array();
			} else {

				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDatoAcademicoCriteria) || !$this->lastDatoAcademicoCriteria->equals($criteria)) {
				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoCriteria = $criteria;

		return $this->collDatoAcademicos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related DatoAcademicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDatoAcademicosJoinsfGuardUserRelatedByCreatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicos === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicos = array();
			} else {

				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDatoAcademicoCriteria) || !$this->lastDatoAcademicoCriteria->equals($criteria)) {
				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoCriteria = $criteria;

		return $this->collDatoAcademicos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related DatoAcademicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDatoAcademicosJoinsfGuardUserRelatedByUpdatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicos === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicos = array();
			} else {

				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDatoAcademicoCriteria) || !$this->lastDatoAcademicoCriteria->equals($criteria)) {
				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoCriteria = $criteria;

		return $this->collDatoAcademicos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related DatoAcademicos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDatoAcademicosJoinsfGuardUserRelatedByDeletedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicos === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicos = array();
			} else {

				$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDatoAcademicoCriteria) || !$this->lastDatoAcademicoCriteria->equals($criteria)) {
				$this->collDatoAcademicos = DatoAcademicoPeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoCriteria = $criteria;

		return $this->collDatoAcademicos;
	}

	/**
	 * Clears out the collDocentes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDocentes()
	 */
	public function clearDocentes()
	{
		$this->collDocentes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDocentes collection (array).
	 *
	 * By default this just sets the collDocentes collection to an empty array (like clearcollDocentes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDocentes()
	{
		$this->collDocentes = array();
	}

	/**
	 * Gets an array of Docente objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Persona has previously been saved, it will retrieve
	 * related Docentes from storage. If this Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Docente[]
	 * @throws     PropelException
	 */
	public function getDocentes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentes === null) {
			if ($this->isNew()) {
			   $this->collDocentes = array();
			} else {

				$criteria->add(DocentePeer::PERSONA_ID, $this->id);

				DocentePeer::addSelectColumns($criteria);
				$this->collDocentes = DocentePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DocentePeer::PERSONA_ID, $this->id);

				DocentePeer::addSelectColumns($criteria);
				if (!isset($this->lastDocenteCriteria) || !$this->lastDocenteCriteria->equals($criteria)) {
					$this->collDocentes = DocentePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDocenteCriteria = $criteria;
		return $this->collDocentes;
	}

	/**
	 * Returns the number of related Docente objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Docente objects.
	 * @throws     PropelException
	 */
	public function countDocentes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDocentes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DocentePeer::PERSONA_ID, $this->id);

				$count = DocentePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DocentePeer::PERSONA_ID, $this->id);

				if (!isset($this->lastDocenteCriteria) || !$this->lastDocenteCriteria->equals($criteria)) {
					$count = DocentePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDocentes);
				}
			} else {
				$count = count($this->collDocentes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Docente object to this object
	 * through the Docente foreign key attribute.
	 *
	 * @param      Docente $l Docente
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDocente(Docente $l)
	{
		if ($this->collDocentes === null) {
			$this->initDocentes();
		}
		if (!in_array($l, $this->collDocentes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDocentes, $l);
			$l->setPersona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Docentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDocentesJoinsfGuardUserRelatedByCreatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentes === null) {
			if ($this->isNew()) {
				$this->collDocentes = array();
			} else {

				$criteria->add(DocentePeer::PERSONA_ID, $this->id);

				$this->collDocentes = DocentePeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocentePeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDocenteCriteria) || !$this->lastDocenteCriteria->equals($criteria)) {
				$this->collDocentes = DocentePeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocenteCriteria = $criteria;

		return $this->collDocentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Docentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDocentesJoinsfGuardUserRelatedByUpdatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentes === null) {
			if ($this->isNew()) {
				$this->collDocentes = array();
			} else {

				$criteria->add(DocentePeer::PERSONA_ID, $this->id);

				$this->collDocentes = DocentePeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocentePeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDocenteCriteria) || !$this->lastDocenteCriteria->equals($criteria)) {
				$this->collDocentes = DocentePeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocenteCriteria = $criteria;

		return $this->collDocentes;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Docentes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDocentesJoinsfGuardUserRelatedByDeletedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentes === null) {
			if ($this->isNew()) {
				$this->collDocentes = array();
			} else {

				$criteria->add(DocentePeer::PERSONA_ID, $this->id);

				$this->collDocentes = DocentePeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocentePeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDocenteCriteria) || !$this->lastDocenteCriteria->equals($criteria)) {
				$this->collDocentes = DocentePeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocenteCriteria = $criteria;

		return $this->collDocentes;
	}

	/**
	 * Clears out the collDomicilios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDomicilios()
	 */
	public function clearDomicilios()
	{
		$this->collDomicilios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDomicilios collection (array).
	 *
	 * By default this just sets the collDomicilios collection to an empty array (like clearcollDomicilios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDomicilios()
	{
		$this->collDomicilios = array();
	}

	/**
	 * Gets an array of Domicilio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Persona has previously been saved, it will retrieve
	 * related Domicilios from storage. If this Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Domicilio[]
	 * @throws     PropelException
	 */
	public function getDomicilios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomicilios === null) {
			if ($this->isNew()) {
			   $this->collDomicilios = array();
			} else {

				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				DomicilioPeer::addSelectColumns($criteria);
				$this->collDomicilios = DomicilioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				DomicilioPeer::addSelectColumns($criteria);
				if (!isset($this->lastDomicilioCriteria) || !$this->lastDomicilioCriteria->equals($criteria)) {
					$this->collDomicilios = DomicilioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDomicilioCriteria = $criteria;
		return $this->collDomicilios;
	}

	/**
	 * Returns the number of related Domicilio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Domicilio objects.
	 * @throws     PropelException
	 */
	public function countDomicilios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDomicilios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				$count = DomicilioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				if (!isset($this->lastDomicilioCriteria) || !$this->lastDomicilioCriteria->equals($criteria)) {
					$count = DomicilioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDomicilios);
				}
			} else {
				$count = count($this->collDomicilios);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Domicilio object to this object
	 * through the Domicilio foreign key attribute.
	 *
	 * @param      Domicilio $l Domicilio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDomicilio(Domicilio $l)
	{
		if ($this->collDomicilios === null) {
			$this->initDomicilios();
		}
		if (!in_array($l, $this->collDomicilios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDomicilios, $l);
			$l->setPersona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Domicilios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDomiciliosJoinProvincia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomicilios === null) {
			if ($this->isNew()) {
				$this->collDomicilios = array();
			} else {

				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				$this->collDomicilios = DomicilioPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDomicilioCriteria) || !$this->lastDomicilioCriteria->equals($criteria)) {
				$this->collDomicilios = DomicilioPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioCriteria = $criteria;

		return $this->collDomicilios;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Domicilios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDomiciliosJoinLocalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomicilios === null) {
			if ($this->isNew()) {
				$this->collDomicilios = array();
			} else {

				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				$this->collDomicilios = DomicilioPeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDomicilioCriteria) || !$this->lastDomicilioCriteria->equals($criteria)) {
				$this->collDomicilios = DomicilioPeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioCriteria = $criteria;

		return $this->collDomicilios;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Domicilios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDomiciliosJoinsfGuardUserRelatedByCreatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomicilios === null) {
			if ($this->isNew()) {
				$this->collDomicilios = array();
			} else {

				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				$this->collDomicilios = DomicilioPeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDomicilioCriteria) || !$this->lastDomicilioCriteria->equals($criteria)) {
				$this->collDomicilios = DomicilioPeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioCriteria = $criteria;

		return $this->collDomicilios;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Domicilios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDomiciliosJoinsfGuardUserRelatedByUpdatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomicilios === null) {
			if ($this->isNew()) {
				$this->collDomicilios = array();
			} else {

				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				$this->collDomicilios = DomicilioPeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDomicilioCriteria) || !$this->lastDomicilioCriteria->equals($criteria)) {
				$this->collDomicilios = DomicilioPeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioCriteria = $criteria;

		return $this->collDomicilios;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Domicilios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getDomiciliosJoinsfGuardUserRelatedByDeletedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomicilios === null) {
			if ($this->isNew()) {
				$this->collDomicilios = array();
			} else {

				$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

				$this->collDomicilios = DomicilioPeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastDomicilioCriteria) || !$this->lastDomicilioCriteria->equals($criteria)) {
				$this->collDomicilios = DomicilioPeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioCriteria = $criteria;

		return $this->collDomicilios;
	}

	/**
	 * Clears out the collEmpleos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpleos()
	 */
	public function clearEmpleos()
	{
		$this->collEmpleos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpleos collection (array).
	 *
	 * By default this just sets the collEmpleos collection to an empty array (like clearcollEmpleos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpleos()
	{
		$this->collEmpleos = array();
	}

	/**
	 * Gets an array of Empleo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Persona has previously been saved, it will retrieve
	 * related Empleos from storage. If this Persona is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empleo[]
	 * @throws     PropelException
	 */
	public function getEmpleos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleos === null) {
			if ($this->isNew()) {
			   $this->collEmpleos = array();
			} else {

				$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

				EmpleoPeer::addSelectColumns($criteria);
				$this->collEmpleos = EmpleoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

				EmpleoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpleoCriteria) || !$this->lastEmpleoCriteria->equals($criteria)) {
					$this->collEmpleos = EmpleoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpleoCriteria = $criteria;
		return $this->collEmpleos;
	}

	/**
	 * Returns the number of related Empleo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empleo objects.
	 * @throws     PropelException
	 */
	public function countEmpleos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpleos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

				$count = EmpleoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

				if (!isset($this->lastEmpleoCriteria) || !$this->lastEmpleoCriteria->equals($criteria)) {
					$count = EmpleoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpleos);
				}
			} else {
				$count = count($this->collEmpleos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empleo object to this object
	 * through the Empleo foreign key attribute.
	 *
	 * @param      Empleo $l Empleo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpleo(Empleo $l)
	{
		if ($this->collEmpleos === null) {
			$this->initEmpleos();
		}
		if (!in_array($l, $this->collEmpleos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpleos, $l);
			$l->setPersona($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Empleos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getEmpleosJoinTipoEmpleo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleos === null) {
			if ($this->isNew()) {
				$this->collEmpleos = array();
			} else {

				$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

				$this->collEmpleos = EmpleoPeer::doSelectJoinTipoEmpleo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastEmpleoCriteria) || !$this->lastEmpleoCriteria->equals($criteria)) {
				$this->collEmpleos = EmpleoPeer::doSelectJoinTipoEmpleo($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoCriteria = $criteria;

		return $this->collEmpleos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Empleos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getEmpleosJoinsfGuardUserRelatedByCreatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleos === null) {
			if ($this->isNew()) {
				$this->collEmpleos = array();
			} else {

				$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

				$this->collEmpleos = EmpleoPeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastEmpleoCriteria) || !$this->lastEmpleoCriteria->equals($criteria)) {
				$this->collEmpleos = EmpleoPeer::doSelectJoinsfGuardUserRelatedByCreatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoCriteria = $criteria;

		return $this->collEmpleos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Empleos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getEmpleosJoinsfGuardUserRelatedByUpdatedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleos === null) {
			if ($this->isNew()) {
				$this->collEmpleos = array();
			} else {

				$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

				$this->collEmpleos = EmpleoPeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastEmpleoCriteria) || !$this->lastEmpleoCriteria->equals($criteria)) {
				$this->collEmpleos = EmpleoPeer::doSelectJoinsfGuardUserRelatedByUpdatedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoCriteria = $criteria;

		return $this->collEmpleos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Persona is new, it will return
	 * an empty collection; or if this Persona has previously
	 * been saved, it will retrieve related Empleos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Persona.
	 */
	public function getEmpleosJoinsfGuardUserRelatedByDeletedById($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleos === null) {
			if ($this->isNew()) {
				$this->collEmpleos = array();
			} else {

				$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

				$this->collEmpleos = EmpleoPeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::PERSONA_ID, $this->id);

			if (!isset($this->lastEmpleoCriteria) || !$this->lastEmpleoCriteria->equals($criteria)) {
				$this->collEmpleos = EmpleoPeer::doSelectJoinsfGuardUserRelatedByDeletedById($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoCriteria = $criteria;

		return $this->collEmpleos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAlumnos) {
				foreach ((array) $this->collAlumnos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDatoAcademicos) {
				foreach ((array) $this->collDatoAcademicos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDocentes) {
				foreach ((array) $this->collDocentes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDomicilios) {
				foreach ((array) $this->collDomicilios as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpleos) {
				foreach ((array) $this->collEmpleos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAlumnos = null;
		$this->collDatoAcademicos = null;
		$this->collDocentes = null;
		$this->collDomicilios = null;
		$this->collEmpleos = null;
			$this->aTipoDocumento = null;
			$this->aTipoSexo = null;
			$this->aNacionalidad = null;
			$this->aEstadoCivil = null;
			$this->asfGuardUserRelatedByCreatedById = null;
			$this->asfGuardUserRelatedByUpdatedById = null;
			$this->asfGuardUserRelatedByDeletedById = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePersona:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePersona::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePersona
