<?php


/**
 * This class defines the structure of the 'persona' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Sep 19 19:40:18 2012
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class PersonaTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.PersonaTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('persona');
		$this->setPhpName('Persona');
		$this->setClassname('Persona');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addColumn('NOMBRE', 'Nombre', 'VARCHAR', false, 50, null);
		$this->addColumn('APELLIDO', 'Apellido', 'VARCHAR', false, 50, null);
		$this->addForeignKey('TIPO_DOCUMENTO_ID', 'TipoDocumentoId', 'INTEGER', 'tipo_documento', 'ID', true, null, null);
		$this->addColumn('NRO_DOCUMENTO', 'NroDocumento', 'INTEGER', true, 14, null);
		$this->addForeignKey('SEXO_ID', 'SexoId', 'INTEGER', 'tipo_sexo', 'ID', false, null, null);
		$this->addColumn('CELULAR', 'Celular', 'INTEGER', false, 20, null);
		$this->addColumn('EMAIL', 'Email', 'VARCHAR', true, 50, null);
		$this->addForeignKey('NACIONALIDAD_ID', 'NacionalidadId', 'INTEGER', 'nacionalidad', 'ID', true, null, null);
		$this->addForeignKey('ESTADO_CIVIL_ID', 'EstadoCivilId', 'INTEGER', 'estado_civil', 'ID', true, null, null);
		$this->addColumn('FECHA_NACIMIENTO', 'FechaNacimiento', 'DATE', true, null, null);
		$this->addColumn('LUGAR_NACIMIENTO', 'LugarNacimiento', 'VARCHAR', false, 50, null);
		$this->addColumn('OBSERVACIONES', 'Observaciones', 'LONGVARCHAR', false, null, null);
		$this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
		$this->addForeignKey('USER_CREATED', 'UserCreated', 'INTEGER', 'usuario', 'ID', true, null, null);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
		$this->addForeignKey('USER_UPDATED', 'UserUpdated', 'INTEGER', 'usuario', 'ID', false, null, null);
		$this->addColumn('DELETED_AT', 'DeletedAt', 'TIMESTAMP', false, null, null);
		$this->addForeignKey('USER_DELETED', 'UserDeleted', 'INTEGER', 'usuario', 'ID', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('TipoDocumento', 'TipoDocumento', RelationMap::MANY_TO_ONE, array('tipo_documento_id' => 'id', ), null, null);
    $this->addRelation('TipoSexo', 'TipoSexo', RelationMap::MANY_TO_ONE, array('sexo_id' => 'id', ), null, null);
    $this->addRelation('Nacionalidad', 'Nacionalidad', RelationMap::MANY_TO_ONE, array('nacionalidad_id' => 'id', ), null, null);
    $this->addRelation('EstadoCivil', 'EstadoCivil', RelationMap::MANY_TO_ONE, array('estado_civil_id' => 'id', ), null, null);
    $this->addRelation('UsuarioRelatedByUserCreated', 'Usuario', RelationMap::MANY_TO_ONE, array('user_created' => 'id', ), null, null);
    $this->addRelation('UsuarioRelatedByUserUpdated', 'Usuario', RelationMap::MANY_TO_ONE, array('user_updated' => 'id', ), null, null);
    $this->addRelation('UsuarioRelatedByUserDeleted', 'Usuario', RelationMap::MANY_TO_ONE, array('user_deleted' => 'id', ), null, null);
    $this->addRelation('Alumno', 'Alumno', RelationMap::ONE_TO_MANY, array('id' => 'persona_id', ), null, null);
    $this->addRelation('DatoAcademico', 'DatoAcademico', RelationMap::ONE_TO_MANY, array('id' => 'persona_id', ), null, null);
    $this->addRelation('Docente', 'Docente', RelationMap::ONE_TO_MANY, array('id' => 'persona_id', ), null, null);
    $this->addRelation('Domicilio', 'Domicilio', RelationMap::ONE_TO_MANY, array('id' => 'persona_id', ), null, null);
    $this->addRelation('Empleo', 'Empleo', RelationMap::ONE_TO_MANY, array('id' => 'persona_id', ), null, null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
		);
	} // getBehaviors()

} // PersonaTableMap
