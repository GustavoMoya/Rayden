<?php

/**
 * Base class that represents a row from the 'sf_guard_user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Tue Oct  2 23:21:55 2012
 *
 * @package    plugins.sfGuardPlugin.lib.model.om
 */
abstract class BasesfGuardUser extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        sfGuardUserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the algorithm field.
	 * Note: this column has a database default value of: 'sha1'
	 * @var        string
	 */
	protected $algorithm;

	/**
	 * The value for the salt field.
	 * @var        string
	 */
	protected $salt;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the last_login field.
	 * @var        string
	 */
	protected $last_login;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the is_super_admin field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_super_admin;

	/**
	 * @var        array sfGuardUserPermission[] Collection to store aggregation of sfGuardUserPermission objects.
	 */
	protected $collsfGuardUserPermissions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserPermissions.
	 */
	private $lastsfGuardUserPermissionCriteria = null;

	/**
	 * @var        array sfGuardUserGroup[] Collection to store aggregation of sfGuardUserGroup objects.
	 */
	protected $collsfGuardUserGroups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserGroups.
	 */
	private $lastsfGuardUserGroupCriteria = null;

	/**
	 * @var        array sfGuardRememberKey[] Collection to store aggregation of sfGuardRememberKey objects.
	 */
	protected $collsfGuardRememberKeys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardRememberKeys.
	 */
	private $lastsfGuardRememberKeyCriteria = null;

	/**
	 * @var        array Alumno[] Collection to store aggregation of Alumno objects.
	 */
	protected $collAlumnosRelatedByCreatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlumnosRelatedByCreatedById.
	 */
	private $lastAlumnoRelatedByCreatedByIdCriteria = null;

	/**
	 * @var        array Alumno[] Collection to store aggregation of Alumno objects.
	 */
	protected $collAlumnosRelatedByUpdatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlumnosRelatedByUpdatedById.
	 */
	private $lastAlumnoRelatedByUpdatedByIdCriteria = null;

	/**
	 * @var        array Alumno[] Collection to store aggregation of Alumno objects.
	 */
	protected $collAlumnosRelatedByDeletedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlumnosRelatedByDeletedById.
	 */
	private $lastAlumnoRelatedByDeletedByIdCriteria = null;

	/**
	 * @var        array Carrera[] Collection to store aggregation of Carrera objects.
	 */
	protected $collCarrerasRelatedByCreatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCarrerasRelatedByCreatedById.
	 */
	private $lastCarreraRelatedByCreatedByIdCriteria = null;

	/**
	 * @var        array Carrera[] Collection to store aggregation of Carrera objects.
	 */
	protected $collCarrerasRelatedByUpdatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCarrerasRelatedByUpdatedById.
	 */
	private $lastCarreraRelatedByUpdatedByIdCriteria = null;

	/**
	 * @var        array Carrera[] Collection to store aggregation of Carrera objects.
	 */
	protected $collCarrerasRelatedByDeletedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCarrerasRelatedByDeletedById.
	 */
	private $lastCarreraRelatedByDeletedByIdCriteria = null;

	/**
	 * @var        array DatoAcademico[] Collection to store aggregation of DatoAcademico objects.
	 */
	protected $collDatoAcademicosRelatedByCreatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDatoAcademicosRelatedByCreatedById.
	 */
	private $lastDatoAcademicoRelatedByCreatedByIdCriteria = null;

	/**
	 * @var        array DatoAcademico[] Collection to store aggregation of DatoAcademico objects.
	 */
	protected $collDatoAcademicosRelatedByUpdatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDatoAcademicosRelatedByUpdatedById.
	 */
	private $lastDatoAcademicoRelatedByUpdatedByIdCriteria = null;

	/**
	 * @var        array DatoAcademico[] Collection to store aggregation of DatoAcademico objects.
	 */
	protected $collDatoAcademicosRelatedByDeletedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDatoAcademicosRelatedByDeletedById.
	 */
	private $lastDatoAcademicoRelatedByDeletedByIdCriteria = null;

	/**
	 * @var        array Docente[] Collection to store aggregation of Docente objects.
	 */
	protected $collDocentesRelatedByCreatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDocentesRelatedByCreatedById.
	 */
	private $lastDocenteRelatedByCreatedByIdCriteria = null;

	/**
	 * @var        array Docente[] Collection to store aggregation of Docente objects.
	 */
	protected $collDocentesRelatedByUpdatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDocentesRelatedByUpdatedById.
	 */
	private $lastDocenteRelatedByUpdatedByIdCriteria = null;

	/**
	 * @var        array Docente[] Collection to store aggregation of Docente objects.
	 */
	protected $collDocentesRelatedByDeletedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDocentesRelatedByDeletedById.
	 */
	private $lastDocenteRelatedByDeletedByIdCriteria = null;

	/**
	 * @var        array Domicilio[] Collection to store aggregation of Domicilio objects.
	 */
	protected $collDomiciliosRelatedByCreatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDomiciliosRelatedByCreatedById.
	 */
	private $lastDomicilioRelatedByCreatedByIdCriteria = null;

	/**
	 * @var        array Domicilio[] Collection to store aggregation of Domicilio objects.
	 */
	protected $collDomiciliosRelatedByUpdatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDomiciliosRelatedByUpdatedById.
	 */
	private $lastDomicilioRelatedByUpdatedByIdCriteria = null;

	/**
	 * @var        array Domicilio[] Collection to store aggregation of Domicilio objects.
	 */
	protected $collDomiciliosRelatedByDeletedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDomiciliosRelatedByDeletedById.
	 */
	private $lastDomicilioRelatedByDeletedByIdCriteria = null;

	/**
	 * @var        array Empleo[] Collection to store aggregation of Empleo objects.
	 */
	protected $collEmpleosRelatedByCreatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpleosRelatedByCreatedById.
	 */
	private $lastEmpleoRelatedByCreatedByIdCriteria = null;

	/**
	 * @var        array Empleo[] Collection to store aggregation of Empleo objects.
	 */
	protected $collEmpleosRelatedByUpdatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpleosRelatedByUpdatedById.
	 */
	private $lastEmpleoRelatedByUpdatedByIdCriteria = null;

	/**
	 * @var        array Empleo[] Collection to store aggregation of Empleo objects.
	 */
	protected $collEmpleosRelatedByDeletedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpleosRelatedByDeletedById.
	 */
	private $lastEmpleoRelatedByDeletedByIdCriteria = null;

	/**
	 * @var        array Persona[] Collection to store aggregation of Persona objects.
	 */
	protected $collPersonasRelatedByCreatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPersonasRelatedByCreatedById.
	 */
	private $lastPersonaRelatedByCreatedByIdCriteria = null;

	/**
	 * @var        array Persona[] Collection to store aggregation of Persona objects.
	 */
	protected $collPersonasRelatedByUpdatedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPersonasRelatedByUpdatedById.
	 */
	private $lastPersonaRelatedByUpdatedByIdCriteria = null;

	/**
	 * @var        array Persona[] Collection to store aggregation of Persona objects.
	 */
	protected $collPersonasRelatedByDeletedById;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPersonasRelatedByDeletedById.
	 */
	private $lastPersonaRelatedByDeletedByIdCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'sfGuardUserPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->algorithm = 'sha1';
		$this->is_active = true;
		$this->is_super_admin = false;
	}

	/**
	 * Initializes internal state of BasesfGuardUser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [algorithm] column value.
	 * 
	 * @return     string
	 */
	public function getAlgorithm()
	{
		return $this->algorithm;
	}

	/**
	 * Get the [salt] column value.
	 * 
	 * @return     string
	 */
	public function getSalt()
	{
		return $this->salt;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [last_login] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastLogin($format = 'Y-m-d H:i:s')
	{
		if ($this->last_login === null) {
			return null;
		}


		if ($this->last_login === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_login);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_login, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [is_super_admin] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsSuperAdmin()
	{
		return $this->is_super_admin;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [algorithm] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setAlgorithm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->algorithm !== $v || $this->isNew()) {
			$this->algorithm = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ALGORITHM;
		}

		return $this;
	} // setAlgorithm()

	/**
	 * Set the value of [salt] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setSalt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salt !== $v) {
			$this->salt = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::SALT;
		}

		return $this;
	} // setSalt()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [last_login] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setLastLogin($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_login !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_login !== null && $tmpDt = new DateTime($this->last_login)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_login = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::LAST_LOGIN;
			}
		} // if either are not null

		return $this;
	} // setLastLogin()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $this->isNew()) {
			$this->is_active = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Set the value of [is_super_admin] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setIsSuperAdmin($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_super_admin !== $v || $this->isNew()) {
			$this->is_super_admin = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::IS_SUPER_ADMIN;
		}

		return $this;
	} // setIsSuperAdmin()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->algorithm !== 'sha1') {
				return false;
			}

			if ($this->is_active !== true) {
				return false;
			}

			if ($this->is_super_admin !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->username = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->algorithm = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->salt = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->password = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->created_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->last_login = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->is_active = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->is_super_admin = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 9; // 9 = sfGuardUserPeer::NUM_COLUMNS - sfGuardUserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating sfGuardUser object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = sfGuardUserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collsfGuardUserPermissions = null;
			$this->lastsfGuardUserPermissionCriteria = null;

			$this->collsfGuardUserGroups = null;
			$this->lastsfGuardUserGroupCriteria = null;

			$this->collsfGuardRememberKeys = null;
			$this->lastsfGuardRememberKeyCriteria = null;

			$this->collAlumnosRelatedByCreatedById = null;
			$this->lastAlumnoRelatedByCreatedByIdCriteria = null;

			$this->collAlumnosRelatedByUpdatedById = null;
			$this->lastAlumnoRelatedByUpdatedByIdCriteria = null;

			$this->collAlumnosRelatedByDeletedById = null;
			$this->lastAlumnoRelatedByDeletedByIdCriteria = null;

			$this->collCarrerasRelatedByCreatedById = null;
			$this->lastCarreraRelatedByCreatedByIdCriteria = null;

			$this->collCarrerasRelatedByUpdatedById = null;
			$this->lastCarreraRelatedByUpdatedByIdCriteria = null;

			$this->collCarrerasRelatedByDeletedById = null;
			$this->lastCarreraRelatedByDeletedByIdCriteria = null;

			$this->collDatoAcademicosRelatedByCreatedById = null;
			$this->lastDatoAcademicoRelatedByCreatedByIdCriteria = null;

			$this->collDatoAcademicosRelatedByUpdatedById = null;
			$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria = null;

			$this->collDatoAcademicosRelatedByDeletedById = null;
			$this->lastDatoAcademicoRelatedByDeletedByIdCriteria = null;

			$this->collDocentesRelatedByCreatedById = null;
			$this->lastDocenteRelatedByCreatedByIdCriteria = null;

			$this->collDocentesRelatedByUpdatedById = null;
			$this->lastDocenteRelatedByUpdatedByIdCriteria = null;

			$this->collDocentesRelatedByDeletedById = null;
			$this->lastDocenteRelatedByDeletedByIdCriteria = null;

			$this->collDomiciliosRelatedByCreatedById = null;
			$this->lastDomicilioRelatedByCreatedByIdCriteria = null;

			$this->collDomiciliosRelatedByUpdatedById = null;
			$this->lastDomicilioRelatedByUpdatedByIdCriteria = null;

			$this->collDomiciliosRelatedByDeletedById = null;
			$this->lastDomicilioRelatedByDeletedByIdCriteria = null;

			$this->collEmpleosRelatedByCreatedById = null;
			$this->lastEmpleoRelatedByCreatedByIdCriteria = null;

			$this->collEmpleosRelatedByUpdatedById = null;
			$this->lastEmpleoRelatedByUpdatedByIdCriteria = null;

			$this->collEmpleosRelatedByDeletedById = null;
			$this->lastEmpleoRelatedByDeletedByIdCriteria = null;

			$this->collPersonasRelatedByCreatedById = null;
			$this->lastPersonaRelatedByCreatedByIdCriteria = null;

			$this->collPersonasRelatedByUpdatedById = null;
			$this->lastPersonaRelatedByUpdatedByIdCriteria = null;

			$this->collPersonasRelatedByDeletedById = null;
			$this->lastPersonaRelatedByDeletedByIdCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasesfGuardUser:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				sfGuardUserPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasesfGuardUser:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasesfGuardUser:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(sfGuardUserPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasesfGuardUser:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				sfGuardUserPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = sfGuardUserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = sfGuardUserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += sfGuardUserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collsfGuardUserPermissions !== null) {
				foreach ($this->collsfGuardUserPermissions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardUserGroups !== null) {
				foreach ($this->collsfGuardUserGroups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardRememberKeys !== null) {
				foreach ($this->collsfGuardRememberKeys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlumnosRelatedByCreatedById !== null) {
				foreach ($this->collAlumnosRelatedByCreatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlumnosRelatedByUpdatedById !== null) {
				foreach ($this->collAlumnosRelatedByUpdatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlumnosRelatedByDeletedById !== null) {
				foreach ($this->collAlumnosRelatedByDeletedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCarrerasRelatedByCreatedById !== null) {
				foreach ($this->collCarrerasRelatedByCreatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCarrerasRelatedByUpdatedById !== null) {
				foreach ($this->collCarrerasRelatedByUpdatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCarrerasRelatedByDeletedById !== null) {
				foreach ($this->collCarrerasRelatedByDeletedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDatoAcademicosRelatedByCreatedById !== null) {
				foreach ($this->collDatoAcademicosRelatedByCreatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDatoAcademicosRelatedByUpdatedById !== null) {
				foreach ($this->collDatoAcademicosRelatedByUpdatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDatoAcademicosRelatedByDeletedById !== null) {
				foreach ($this->collDatoAcademicosRelatedByDeletedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDocentesRelatedByCreatedById !== null) {
				foreach ($this->collDocentesRelatedByCreatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDocentesRelatedByUpdatedById !== null) {
				foreach ($this->collDocentesRelatedByUpdatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDocentesRelatedByDeletedById !== null) {
				foreach ($this->collDocentesRelatedByDeletedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDomiciliosRelatedByCreatedById !== null) {
				foreach ($this->collDomiciliosRelatedByCreatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDomiciliosRelatedByUpdatedById !== null) {
				foreach ($this->collDomiciliosRelatedByUpdatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDomiciliosRelatedByDeletedById !== null) {
				foreach ($this->collDomiciliosRelatedByDeletedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpleosRelatedByCreatedById !== null) {
				foreach ($this->collEmpleosRelatedByCreatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpleosRelatedByUpdatedById !== null) {
				foreach ($this->collEmpleosRelatedByUpdatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpleosRelatedByDeletedById !== null) {
				foreach ($this->collEmpleosRelatedByDeletedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPersonasRelatedByCreatedById !== null) {
				foreach ($this->collPersonasRelatedByCreatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPersonasRelatedByUpdatedById !== null) {
				foreach ($this->collPersonasRelatedByUpdatedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPersonasRelatedByDeletedById !== null) {
				foreach ($this->collPersonasRelatedByDeletedById as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = sfGuardUserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collsfGuardUserPermissions !== null) {
					foreach ($this->collsfGuardUserPermissions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardUserGroups !== null) {
					foreach ($this->collsfGuardUserGroups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardRememberKeys !== null) {
					foreach ($this->collsfGuardRememberKeys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAlumnosRelatedByCreatedById !== null) {
					foreach ($this->collAlumnosRelatedByCreatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAlumnosRelatedByUpdatedById !== null) {
					foreach ($this->collAlumnosRelatedByUpdatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAlumnosRelatedByDeletedById !== null) {
					foreach ($this->collAlumnosRelatedByDeletedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCarrerasRelatedByCreatedById !== null) {
					foreach ($this->collCarrerasRelatedByCreatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCarrerasRelatedByUpdatedById !== null) {
					foreach ($this->collCarrerasRelatedByUpdatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCarrerasRelatedByDeletedById !== null) {
					foreach ($this->collCarrerasRelatedByDeletedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDatoAcademicosRelatedByCreatedById !== null) {
					foreach ($this->collDatoAcademicosRelatedByCreatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDatoAcademicosRelatedByUpdatedById !== null) {
					foreach ($this->collDatoAcademicosRelatedByUpdatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDatoAcademicosRelatedByDeletedById !== null) {
					foreach ($this->collDatoAcademicosRelatedByDeletedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDocentesRelatedByCreatedById !== null) {
					foreach ($this->collDocentesRelatedByCreatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDocentesRelatedByUpdatedById !== null) {
					foreach ($this->collDocentesRelatedByUpdatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDocentesRelatedByDeletedById !== null) {
					foreach ($this->collDocentesRelatedByDeletedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDomiciliosRelatedByCreatedById !== null) {
					foreach ($this->collDomiciliosRelatedByCreatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDomiciliosRelatedByUpdatedById !== null) {
					foreach ($this->collDomiciliosRelatedByUpdatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDomiciliosRelatedByDeletedById !== null) {
					foreach ($this->collDomiciliosRelatedByDeletedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpleosRelatedByCreatedById !== null) {
					foreach ($this->collEmpleosRelatedByCreatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpleosRelatedByUpdatedById !== null) {
					foreach ($this->collEmpleosRelatedByUpdatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpleosRelatedByDeletedById !== null) {
					foreach ($this->collEmpleosRelatedByDeletedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPersonasRelatedByCreatedById !== null) {
					foreach ($this->collPersonasRelatedByCreatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPersonasRelatedByUpdatedById !== null) {
					foreach ($this->collPersonasRelatedByUpdatedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPersonasRelatedByDeletedById !== null) {
					foreach ($this->collPersonasRelatedByDeletedById as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfGuardUserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getUsername();
				break;
			case 2:
				return $this->getAlgorithm();
				break;
			case 3:
				return $this->getSalt();
				break;
			case 4:
				return $this->getPassword();
				break;
			case 5:
				return $this->getCreatedAt();
				break;
			case 6:
				return $this->getLastLogin();
				break;
			case 7:
				return $this->getIsActive();
				break;
			case 8:
				return $this->getIsSuperAdmin();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = sfGuardUserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getUsername(),
			$keys[2] => $this->getAlgorithm(),
			$keys[3] => $this->getSalt(),
			$keys[4] => $this->getPassword(),
			$keys[5] => $this->getCreatedAt(),
			$keys[6] => $this->getLastLogin(),
			$keys[7] => $this->getIsActive(),
			$keys[8] => $this->getIsSuperAdmin(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfGuardUserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setUsername($value);
				break;
			case 2:
				$this->setAlgorithm($value);
				break;
			case 3:
				$this->setSalt($value);
				break;
			case 4:
				$this->setPassword($value);
				break;
			case 5:
				$this->setCreatedAt($value);
				break;
			case 6:
				$this->setLastLogin($value);
				break;
			case 7:
				$this->setIsActive($value);
				break;
			case 8:
				$this->setIsSuperAdmin($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = sfGuardUserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUsername($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAlgorithm($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSalt($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPassword($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCreatedAt($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setLastLogin($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIsActive($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIsSuperAdmin($arr[$keys[8]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);

		if ($this->isColumnModified(sfGuardUserPeer::ID)) $criteria->add(sfGuardUserPeer::ID, $this->id);
		if ($this->isColumnModified(sfGuardUserPeer::USERNAME)) $criteria->add(sfGuardUserPeer::USERNAME, $this->username);
		if ($this->isColumnModified(sfGuardUserPeer::ALGORITHM)) $criteria->add(sfGuardUserPeer::ALGORITHM, $this->algorithm);
		if ($this->isColumnModified(sfGuardUserPeer::SALT)) $criteria->add(sfGuardUserPeer::SALT, $this->salt);
		if ($this->isColumnModified(sfGuardUserPeer::PASSWORD)) $criteria->add(sfGuardUserPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(sfGuardUserPeer::CREATED_AT)) $criteria->add(sfGuardUserPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(sfGuardUserPeer::LAST_LOGIN)) $criteria->add(sfGuardUserPeer::LAST_LOGIN, $this->last_login);
		if ($this->isColumnModified(sfGuardUserPeer::IS_ACTIVE)) $criteria->add(sfGuardUserPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(sfGuardUserPeer::IS_SUPER_ADMIN)) $criteria->add(sfGuardUserPeer::IS_SUPER_ADMIN, $this->is_super_admin);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);

		$criteria->add(sfGuardUserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of sfGuardUser (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUsername($this->username);

		$copyObj->setAlgorithm($this->algorithm);

		$copyObj->setSalt($this->salt);

		$copyObj->setPassword($this->password);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setLastLogin($this->last_login);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setIsSuperAdmin($this->is_super_admin);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getsfGuardUserPermissions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserPermission($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardUserGroups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserGroup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardRememberKeys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardRememberKey($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlumnosRelatedByCreatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlumnoRelatedByCreatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlumnosRelatedByUpdatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlumnoRelatedByUpdatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlumnosRelatedByDeletedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlumnoRelatedByDeletedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCarrerasRelatedByCreatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCarreraRelatedByCreatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCarrerasRelatedByUpdatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCarreraRelatedByUpdatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCarrerasRelatedByDeletedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCarreraRelatedByDeletedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDatoAcademicosRelatedByCreatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDatoAcademicoRelatedByCreatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDatoAcademicosRelatedByUpdatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDatoAcademicoRelatedByUpdatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDatoAcademicosRelatedByDeletedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDatoAcademicoRelatedByDeletedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDocentesRelatedByCreatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDocenteRelatedByCreatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDocentesRelatedByUpdatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDocenteRelatedByUpdatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDocentesRelatedByDeletedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDocenteRelatedByDeletedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDomiciliosRelatedByCreatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDomicilioRelatedByCreatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDomiciliosRelatedByUpdatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDomicilioRelatedByUpdatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDomiciliosRelatedByDeletedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDomicilioRelatedByDeletedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpleosRelatedByCreatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpleoRelatedByCreatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpleosRelatedByUpdatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpleoRelatedByUpdatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpleosRelatedByDeletedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpleoRelatedByDeletedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPersonasRelatedByCreatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPersonaRelatedByCreatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPersonasRelatedByUpdatedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPersonaRelatedByUpdatedById($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPersonasRelatedByDeletedById() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPersonaRelatedByDeletedById($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     sfGuardUser Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     sfGuardUserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new sfGuardUserPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collsfGuardUserPermissions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserPermissions()
	 */
	public function clearsfGuardUserPermissions()
	{
		$this->collsfGuardUserPermissions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserPermissions collection (array).
	 *
	 * By default this just sets the collsfGuardUserPermissions collection to an empty array (like clearcollsfGuardUserPermissions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserPermissions()
	{
		$this->collsfGuardUserPermissions = array();
	}

	/**
	 * Gets an array of sfGuardUserPermission objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserPermissions from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserPermission[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserPermissions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserPermissions = array();
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				sfGuardUserPermissionPeer::addSelectColumns($criteria);
				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				sfGuardUserPermissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
					$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserPermissionCriteria = $criteria;
		return $this->collsfGuardUserPermissions;
	}

	/**
	 * Returns the number of related sfGuardUserPermission objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserPermission objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserPermissions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				$count = sfGuardUserPermissionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
					$count = sfGuardUserPermissionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardUserPermissions);
				}
			} else {
				$count = count($this->collsfGuardUserPermissions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserPermission object to this object
	 * through the sfGuardUserPermission foreign key attribute.
	 *
	 * @param      sfGuardUserPermission $l sfGuardUserPermission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserPermission(sfGuardUserPermission $l)
	{
		if ($this->collsfGuardUserPermissions === null) {
			$this->initsfGuardUserPermissions();
		}
		if (!in_array($l, $this->collsfGuardUserPermissions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserPermissions, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related sfGuardUserPermissions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getsfGuardUserPermissionsJoinsfGuardPermission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserPermissions = array();
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelectJoinsfGuardPermission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

			if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelectJoinsfGuardPermission($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserPermissionCriteria = $criteria;

		return $this->collsfGuardUserPermissions;
	}

	/**
	 * Clears out the collsfGuardUserGroups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserGroups()
	 */
	public function clearsfGuardUserGroups()
	{
		$this->collsfGuardUserGroups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserGroups collection (array).
	 *
	 * By default this just sets the collsfGuardUserGroups collection to an empty array (like clearcollsfGuardUserGroups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserGroups()
	{
		$this->collsfGuardUserGroups = array();
	}

	/**
	 * Gets an array of sfGuardUserGroup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserGroups from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserGroup[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserGroups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserGroups = array();
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				sfGuardUserGroupPeer::addSelectColumns($criteria);
				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				sfGuardUserGroupPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
					$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserGroupCriteria = $criteria;
		return $this->collsfGuardUserGroups;
	}

	/**
	 * Returns the number of related sfGuardUserGroup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserGroup objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				$count = sfGuardUserGroupPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
					$count = sfGuardUserGroupPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardUserGroups);
				}
			} else {
				$count = count($this->collsfGuardUserGroups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserGroup object to this object
	 * through the sfGuardUserGroup foreign key attribute.
	 *
	 * @param      sfGuardUserGroup $l sfGuardUserGroup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserGroup(sfGuardUserGroup $l)
	{
		if ($this->collsfGuardUserGroups === null) {
			$this->initsfGuardUserGroups();
		}
		if (!in_array($l, $this->collsfGuardUserGroups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserGroups, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related sfGuardUserGroups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getsfGuardUserGroupsJoinsfGuardGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserGroups = array();
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelectJoinsfGuardGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

			if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelectJoinsfGuardGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserGroupCriteria = $criteria;

		return $this->collsfGuardUserGroups;
	}

	/**
	 * Clears out the collsfGuardRememberKeys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardRememberKeys()
	 */
	public function clearsfGuardRememberKeys()
	{
		$this->collsfGuardRememberKeys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardRememberKeys collection (array).
	 *
	 * By default this just sets the collsfGuardRememberKeys collection to an empty array (like clearcollsfGuardRememberKeys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardRememberKeys()
	{
		$this->collsfGuardRememberKeys = array();
	}

	/**
	 * Gets an array of sfGuardRememberKey objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardRememberKeys from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardRememberKey[]
	 * @throws     PropelException
	 */
	public function getsfGuardRememberKeys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardRememberKeys === null) {
			if ($this->isNew()) {
			   $this->collsfGuardRememberKeys = array();
			} else {

				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				sfGuardRememberKeyPeer::addSelectColumns($criteria);
				$this->collsfGuardRememberKeys = sfGuardRememberKeyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				sfGuardRememberKeyPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardRememberKeyCriteria) || !$this->lastsfGuardRememberKeyCriteria->equals($criteria)) {
					$this->collsfGuardRememberKeys = sfGuardRememberKeyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardRememberKeyCriteria = $criteria;
		return $this->collsfGuardRememberKeys;
	}

	/**
	 * Returns the number of related sfGuardRememberKey objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardRememberKey objects.
	 * @throws     PropelException
	 */
	public function countsfGuardRememberKeys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardRememberKeys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				$count = sfGuardRememberKeyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardRememberKeyCriteria) || !$this->lastsfGuardRememberKeyCriteria->equals($criteria)) {
					$count = sfGuardRememberKeyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardRememberKeys);
				}
			} else {
				$count = count($this->collsfGuardRememberKeys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardRememberKey object to this object
	 * through the sfGuardRememberKey foreign key attribute.
	 *
	 * @param      sfGuardRememberKey $l sfGuardRememberKey
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardRememberKey(sfGuardRememberKey $l)
	{
		if ($this->collsfGuardRememberKeys === null) {
			$this->initsfGuardRememberKeys();
		}
		if (!in_array($l, $this->collsfGuardRememberKeys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardRememberKeys, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collAlumnosRelatedByCreatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlumnosRelatedByCreatedById()
	 */
	public function clearAlumnosRelatedByCreatedById()
	{
		$this->collAlumnosRelatedByCreatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlumnosRelatedByCreatedById collection (array).
	 *
	 * By default this just sets the collAlumnosRelatedByCreatedById collection to an empty array (like clearcollAlumnosRelatedByCreatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlumnosRelatedByCreatedById()
	{
		$this->collAlumnosRelatedByCreatedById = array();
	}

	/**
	 * Gets an array of Alumno objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AlumnosRelatedByCreatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Alumno[]
	 * @throws     PropelException
	 */
	public function getAlumnosRelatedByCreatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnosRelatedByCreatedById === null) {
			if ($this->isNew()) {
			   $this->collAlumnosRelatedByCreatedById = array();
			} else {

				$criteria->add(AlumnoPeer::CREATED_BY_ID, $this->id);

				AlumnoPeer::addSelectColumns($criteria);
				$this->collAlumnosRelatedByCreatedById = AlumnoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlumnoPeer::CREATED_BY_ID, $this->id);

				AlumnoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlumnoRelatedByCreatedByIdCriteria) || !$this->lastAlumnoRelatedByCreatedByIdCriteria->equals($criteria)) {
					$this->collAlumnosRelatedByCreatedById = AlumnoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlumnoRelatedByCreatedByIdCriteria = $criteria;
		return $this->collAlumnosRelatedByCreatedById;
	}

	/**
	 * Returns the number of related Alumno objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Alumno objects.
	 * @throws     PropelException
	 */
	public function countAlumnosRelatedByCreatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlumnosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlumnoPeer::CREATED_BY_ID, $this->id);

				$count = AlumnoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlumnoPeer::CREATED_BY_ID, $this->id);

				if (!isset($this->lastAlumnoRelatedByCreatedByIdCriteria) || !$this->lastAlumnoRelatedByCreatedByIdCriteria->equals($criteria)) {
					$count = AlumnoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlumnosRelatedByCreatedById);
				}
			} else {
				$count = count($this->collAlumnosRelatedByCreatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Alumno object to this object
	 * through the Alumno foreign key attribute.
	 *
	 * @param      Alumno $l Alumno
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlumnoRelatedByCreatedById(Alumno $l)
	{
		if ($this->collAlumnosRelatedByCreatedById === null) {
			$this->initAlumnosRelatedByCreatedById();
		}
		if (!in_array($l, $this->collAlumnosRelatedByCreatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlumnosRelatedByCreatedById, $l);
			$l->setsfGuardUserRelatedByCreatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AlumnosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAlumnosRelatedByCreatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collAlumnosRelatedByCreatedById = array();
			} else {

				$criteria->add(AlumnoPeer::CREATED_BY_ID, $this->id);

				$this->collAlumnosRelatedByCreatedById = AlumnoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlumnoPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastAlumnoRelatedByCreatedByIdCriteria) || !$this->lastAlumnoRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collAlumnosRelatedByCreatedById = AlumnoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlumnoRelatedByCreatedByIdCriteria = $criteria;

		return $this->collAlumnosRelatedByCreatedById;
	}

	/**
	 * Clears out the collAlumnosRelatedByUpdatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlumnosRelatedByUpdatedById()
	 */
	public function clearAlumnosRelatedByUpdatedById()
	{
		$this->collAlumnosRelatedByUpdatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlumnosRelatedByUpdatedById collection (array).
	 *
	 * By default this just sets the collAlumnosRelatedByUpdatedById collection to an empty array (like clearcollAlumnosRelatedByUpdatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlumnosRelatedByUpdatedById()
	{
		$this->collAlumnosRelatedByUpdatedById = array();
	}

	/**
	 * Gets an array of Alumno objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AlumnosRelatedByUpdatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Alumno[]
	 * @throws     PropelException
	 */
	public function getAlumnosRelatedByUpdatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
			   $this->collAlumnosRelatedByUpdatedById = array();
			} else {

				$criteria->add(AlumnoPeer::UPDATED_BY_ID, $this->id);

				AlumnoPeer::addSelectColumns($criteria);
				$this->collAlumnosRelatedByUpdatedById = AlumnoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlumnoPeer::UPDATED_BY_ID, $this->id);

				AlumnoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlumnoRelatedByUpdatedByIdCriteria) || !$this->lastAlumnoRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$this->collAlumnosRelatedByUpdatedById = AlumnoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlumnoRelatedByUpdatedByIdCriteria = $criteria;
		return $this->collAlumnosRelatedByUpdatedById;
	}

	/**
	 * Returns the number of related Alumno objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Alumno objects.
	 * @throws     PropelException
	 */
	public function countAlumnosRelatedByUpdatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlumnosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlumnoPeer::UPDATED_BY_ID, $this->id);

				$count = AlumnoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlumnoPeer::UPDATED_BY_ID, $this->id);

				if (!isset($this->lastAlumnoRelatedByUpdatedByIdCriteria) || !$this->lastAlumnoRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$count = AlumnoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlumnosRelatedByUpdatedById);
				}
			} else {
				$count = count($this->collAlumnosRelatedByUpdatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Alumno object to this object
	 * through the Alumno foreign key attribute.
	 *
	 * @param      Alumno $l Alumno
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlumnoRelatedByUpdatedById(Alumno $l)
	{
		if ($this->collAlumnosRelatedByUpdatedById === null) {
			$this->initAlumnosRelatedByUpdatedById();
		}
		if (!in_array($l, $this->collAlumnosRelatedByUpdatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlumnosRelatedByUpdatedById, $l);
			$l->setsfGuardUserRelatedByUpdatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AlumnosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAlumnosRelatedByUpdatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collAlumnosRelatedByUpdatedById = array();
			} else {

				$criteria->add(AlumnoPeer::UPDATED_BY_ID, $this->id);

				$this->collAlumnosRelatedByUpdatedById = AlumnoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlumnoPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastAlumnoRelatedByUpdatedByIdCriteria) || !$this->lastAlumnoRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collAlumnosRelatedByUpdatedById = AlumnoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlumnoRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collAlumnosRelatedByUpdatedById;
	}

	/**
	 * Clears out the collAlumnosRelatedByDeletedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlumnosRelatedByDeletedById()
	 */
	public function clearAlumnosRelatedByDeletedById()
	{
		$this->collAlumnosRelatedByDeletedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlumnosRelatedByDeletedById collection (array).
	 *
	 * By default this just sets the collAlumnosRelatedByDeletedById collection to an empty array (like clearcollAlumnosRelatedByDeletedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlumnosRelatedByDeletedById()
	{
		$this->collAlumnosRelatedByDeletedById = array();
	}

	/**
	 * Gets an array of Alumno objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AlumnosRelatedByDeletedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Alumno[]
	 * @throws     PropelException
	 */
	public function getAlumnosRelatedByDeletedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnosRelatedByDeletedById === null) {
			if ($this->isNew()) {
			   $this->collAlumnosRelatedByDeletedById = array();
			} else {

				$criteria->add(AlumnoPeer::DELETED_BY_ID, $this->id);

				AlumnoPeer::addSelectColumns($criteria);
				$this->collAlumnosRelatedByDeletedById = AlumnoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlumnoPeer::DELETED_BY_ID, $this->id);

				AlumnoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlumnoRelatedByDeletedByIdCriteria) || !$this->lastAlumnoRelatedByDeletedByIdCriteria->equals($criteria)) {
					$this->collAlumnosRelatedByDeletedById = AlumnoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlumnoRelatedByDeletedByIdCriteria = $criteria;
		return $this->collAlumnosRelatedByDeletedById;
	}

	/**
	 * Returns the number of related Alumno objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Alumno objects.
	 * @throws     PropelException
	 */
	public function countAlumnosRelatedByDeletedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlumnosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlumnoPeer::DELETED_BY_ID, $this->id);

				$count = AlumnoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlumnoPeer::DELETED_BY_ID, $this->id);

				if (!isset($this->lastAlumnoRelatedByDeletedByIdCriteria) || !$this->lastAlumnoRelatedByDeletedByIdCriteria->equals($criteria)) {
					$count = AlumnoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlumnosRelatedByDeletedById);
				}
			} else {
				$count = count($this->collAlumnosRelatedByDeletedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Alumno object to this object
	 * through the Alumno foreign key attribute.
	 *
	 * @param      Alumno $l Alumno
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlumnoRelatedByDeletedById(Alumno $l)
	{
		if ($this->collAlumnosRelatedByDeletedById === null) {
			$this->initAlumnosRelatedByDeletedById();
		}
		if (!in_array($l, $this->collAlumnosRelatedByDeletedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlumnosRelatedByDeletedById, $l);
			$l->setsfGuardUserRelatedByDeletedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AlumnosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAlumnosRelatedByDeletedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlumnosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collAlumnosRelatedByDeletedById = array();
			} else {

				$criteria->add(AlumnoPeer::DELETED_BY_ID, $this->id);

				$this->collAlumnosRelatedByDeletedById = AlumnoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlumnoPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastAlumnoRelatedByDeletedByIdCriteria) || !$this->lastAlumnoRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collAlumnosRelatedByDeletedById = AlumnoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlumnoRelatedByDeletedByIdCriteria = $criteria;

		return $this->collAlumnosRelatedByDeletedById;
	}

	/**
	 * Clears out the collCarrerasRelatedByCreatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCarrerasRelatedByCreatedById()
	 */
	public function clearCarrerasRelatedByCreatedById()
	{
		$this->collCarrerasRelatedByCreatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCarrerasRelatedByCreatedById collection (array).
	 *
	 * By default this just sets the collCarrerasRelatedByCreatedById collection to an empty array (like clearcollCarrerasRelatedByCreatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCarrerasRelatedByCreatedById()
	{
		$this->collCarrerasRelatedByCreatedById = array();
	}

	/**
	 * Gets an array of Carrera objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related CarrerasRelatedByCreatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Carrera[]
	 * @throws     PropelException
	 */
	public function getCarrerasRelatedByCreatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCarrerasRelatedByCreatedById === null) {
			if ($this->isNew()) {
			   $this->collCarrerasRelatedByCreatedById = array();
			} else {

				$criteria->add(CarreraPeer::CREATED_BY_ID, $this->id);

				CarreraPeer::addSelectColumns($criteria);
				$this->collCarrerasRelatedByCreatedById = CarreraPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CarreraPeer::CREATED_BY_ID, $this->id);

				CarreraPeer::addSelectColumns($criteria);
				if (!isset($this->lastCarreraRelatedByCreatedByIdCriteria) || !$this->lastCarreraRelatedByCreatedByIdCriteria->equals($criteria)) {
					$this->collCarrerasRelatedByCreatedById = CarreraPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCarreraRelatedByCreatedByIdCriteria = $criteria;
		return $this->collCarrerasRelatedByCreatedById;
	}

	/**
	 * Returns the number of related Carrera objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Carrera objects.
	 * @throws     PropelException
	 */
	public function countCarrerasRelatedByCreatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCarrerasRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CarreraPeer::CREATED_BY_ID, $this->id);

				$count = CarreraPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CarreraPeer::CREATED_BY_ID, $this->id);

				if (!isset($this->lastCarreraRelatedByCreatedByIdCriteria) || !$this->lastCarreraRelatedByCreatedByIdCriteria->equals($criteria)) {
					$count = CarreraPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCarrerasRelatedByCreatedById);
				}
			} else {
				$count = count($this->collCarrerasRelatedByCreatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Carrera object to this object
	 * through the Carrera foreign key attribute.
	 *
	 * @param      Carrera $l Carrera
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCarreraRelatedByCreatedById(Carrera $l)
	{
		if ($this->collCarrerasRelatedByCreatedById === null) {
			$this->initCarrerasRelatedByCreatedById();
		}
		if (!in_array($l, $this->collCarrerasRelatedByCreatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCarrerasRelatedByCreatedById, $l);
			$l->setsfGuardUserRelatedByCreatedById($this);
		}
	}

	/**
	 * Clears out the collCarrerasRelatedByUpdatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCarrerasRelatedByUpdatedById()
	 */
	public function clearCarrerasRelatedByUpdatedById()
	{
		$this->collCarrerasRelatedByUpdatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCarrerasRelatedByUpdatedById collection (array).
	 *
	 * By default this just sets the collCarrerasRelatedByUpdatedById collection to an empty array (like clearcollCarrerasRelatedByUpdatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCarrerasRelatedByUpdatedById()
	{
		$this->collCarrerasRelatedByUpdatedById = array();
	}

	/**
	 * Gets an array of Carrera objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related CarrerasRelatedByUpdatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Carrera[]
	 * @throws     PropelException
	 */
	public function getCarrerasRelatedByUpdatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCarrerasRelatedByUpdatedById === null) {
			if ($this->isNew()) {
			   $this->collCarrerasRelatedByUpdatedById = array();
			} else {

				$criteria->add(CarreraPeer::UPDATED_BY_ID, $this->id);

				CarreraPeer::addSelectColumns($criteria);
				$this->collCarrerasRelatedByUpdatedById = CarreraPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CarreraPeer::UPDATED_BY_ID, $this->id);

				CarreraPeer::addSelectColumns($criteria);
				if (!isset($this->lastCarreraRelatedByUpdatedByIdCriteria) || !$this->lastCarreraRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$this->collCarrerasRelatedByUpdatedById = CarreraPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCarreraRelatedByUpdatedByIdCriteria = $criteria;
		return $this->collCarrerasRelatedByUpdatedById;
	}

	/**
	 * Returns the number of related Carrera objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Carrera objects.
	 * @throws     PropelException
	 */
	public function countCarrerasRelatedByUpdatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCarrerasRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CarreraPeer::UPDATED_BY_ID, $this->id);

				$count = CarreraPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CarreraPeer::UPDATED_BY_ID, $this->id);

				if (!isset($this->lastCarreraRelatedByUpdatedByIdCriteria) || !$this->lastCarreraRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$count = CarreraPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCarrerasRelatedByUpdatedById);
				}
			} else {
				$count = count($this->collCarrerasRelatedByUpdatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Carrera object to this object
	 * through the Carrera foreign key attribute.
	 *
	 * @param      Carrera $l Carrera
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCarreraRelatedByUpdatedById(Carrera $l)
	{
		if ($this->collCarrerasRelatedByUpdatedById === null) {
			$this->initCarrerasRelatedByUpdatedById();
		}
		if (!in_array($l, $this->collCarrerasRelatedByUpdatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCarrerasRelatedByUpdatedById, $l);
			$l->setsfGuardUserRelatedByUpdatedById($this);
		}
	}

	/**
	 * Clears out the collCarrerasRelatedByDeletedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCarrerasRelatedByDeletedById()
	 */
	public function clearCarrerasRelatedByDeletedById()
	{
		$this->collCarrerasRelatedByDeletedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCarrerasRelatedByDeletedById collection (array).
	 *
	 * By default this just sets the collCarrerasRelatedByDeletedById collection to an empty array (like clearcollCarrerasRelatedByDeletedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCarrerasRelatedByDeletedById()
	{
		$this->collCarrerasRelatedByDeletedById = array();
	}

	/**
	 * Gets an array of Carrera objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related CarrerasRelatedByDeletedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Carrera[]
	 * @throws     PropelException
	 */
	public function getCarrerasRelatedByDeletedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCarrerasRelatedByDeletedById === null) {
			if ($this->isNew()) {
			   $this->collCarrerasRelatedByDeletedById = array();
			} else {

				$criteria->add(CarreraPeer::DELETED_BY_ID, $this->id);

				CarreraPeer::addSelectColumns($criteria);
				$this->collCarrerasRelatedByDeletedById = CarreraPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CarreraPeer::DELETED_BY_ID, $this->id);

				CarreraPeer::addSelectColumns($criteria);
				if (!isset($this->lastCarreraRelatedByDeletedByIdCriteria) || !$this->lastCarreraRelatedByDeletedByIdCriteria->equals($criteria)) {
					$this->collCarrerasRelatedByDeletedById = CarreraPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCarreraRelatedByDeletedByIdCriteria = $criteria;
		return $this->collCarrerasRelatedByDeletedById;
	}

	/**
	 * Returns the number of related Carrera objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Carrera objects.
	 * @throws     PropelException
	 */
	public function countCarrerasRelatedByDeletedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCarrerasRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CarreraPeer::DELETED_BY_ID, $this->id);

				$count = CarreraPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CarreraPeer::DELETED_BY_ID, $this->id);

				if (!isset($this->lastCarreraRelatedByDeletedByIdCriteria) || !$this->lastCarreraRelatedByDeletedByIdCriteria->equals($criteria)) {
					$count = CarreraPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCarrerasRelatedByDeletedById);
				}
			} else {
				$count = count($this->collCarrerasRelatedByDeletedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Carrera object to this object
	 * through the Carrera foreign key attribute.
	 *
	 * @param      Carrera $l Carrera
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCarreraRelatedByDeletedById(Carrera $l)
	{
		if ($this->collCarrerasRelatedByDeletedById === null) {
			$this->initCarrerasRelatedByDeletedById();
		}
		if (!in_array($l, $this->collCarrerasRelatedByDeletedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCarrerasRelatedByDeletedById, $l);
			$l->setsfGuardUserRelatedByDeletedById($this);
		}
	}

	/**
	 * Clears out the collDatoAcademicosRelatedByCreatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDatoAcademicosRelatedByCreatedById()
	 */
	public function clearDatoAcademicosRelatedByCreatedById()
	{
		$this->collDatoAcademicosRelatedByCreatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDatoAcademicosRelatedByCreatedById collection (array).
	 *
	 * By default this just sets the collDatoAcademicosRelatedByCreatedById collection to an empty array (like clearcollDatoAcademicosRelatedByCreatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDatoAcademicosRelatedByCreatedById()
	{
		$this->collDatoAcademicosRelatedByCreatedById = array();
	}

	/**
	 * Gets an array of DatoAcademico objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DatoAcademicosRelatedByCreatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DatoAcademico[]
	 * @throws     PropelException
	 */
	public function getDatoAcademicosRelatedByCreatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByCreatedById === null) {
			if ($this->isNew()) {
			   $this->collDatoAcademicosRelatedByCreatedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

				DatoAcademicoPeer::addSelectColumns($criteria);
				$this->collDatoAcademicosRelatedByCreatedById = DatoAcademicoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

				DatoAcademicoPeer::addSelectColumns($criteria);
				if (!isset($this->lastDatoAcademicoRelatedByCreatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByCreatedByIdCriteria->equals($criteria)) {
					$this->collDatoAcademicosRelatedByCreatedById = DatoAcademicoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDatoAcademicoRelatedByCreatedByIdCriteria = $criteria;
		return $this->collDatoAcademicosRelatedByCreatedById;
	}

	/**
	 * Returns the number of related DatoAcademico objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DatoAcademico objects.
	 * @throws     PropelException
	 */
	public function countDatoAcademicosRelatedByCreatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDatoAcademicosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

				$count = DatoAcademicoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

				if (!isset($this->lastDatoAcademicoRelatedByCreatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByCreatedByIdCriteria->equals($criteria)) {
					$count = DatoAcademicoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDatoAcademicosRelatedByCreatedById);
				}
			} else {
				$count = count($this->collDatoAcademicosRelatedByCreatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DatoAcademico object to this object
	 * through the DatoAcademico foreign key attribute.
	 *
	 * @param      DatoAcademico $l DatoAcademico
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDatoAcademicoRelatedByCreatedById(DatoAcademico $l)
	{
		if ($this->collDatoAcademicosRelatedByCreatedById === null) {
			$this->initDatoAcademicosRelatedByCreatedById();
		}
		if (!in_array($l, $this->collDatoAcademicosRelatedByCreatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDatoAcademicosRelatedByCreatedById, $l);
			$l->setsfGuardUserRelatedByCreatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByCreatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByCreatedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByCreatedById = DatoAcademicoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByCreatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByCreatedById = DatoAcademicoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByCreatedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByCreatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByCreatedByIdJoinTipoTitulo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByCreatedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByCreatedById = DatoAcademicoPeer::doSelectJoinTipoTitulo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByCreatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByCreatedById = DatoAcademicoPeer::doSelectJoinTipoTitulo($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByCreatedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByCreatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByCreatedByIdJoinNacionalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByCreatedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByCreatedById = DatoAcademicoPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByCreatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByCreatedById = DatoAcademicoPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByCreatedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByCreatedById;
	}

	/**
	 * Clears out the collDatoAcademicosRelatedByUpdatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDatoAcademicosRelatedByUpdatedById()
	 */
	public function clearDatoAcademicosRelatedByUpdatedById()
	{
		$this->collDatoAcademicosRelatedByUpdatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDatoAcademicosRelatedByUpdatedById collection (array).
	 *
	 * By default this just sets the collDatoAcademicosRelatedByUpdatedById collection to an empty array (like clearcollDatoAcademicosRelatedByUpdatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDatoAcademicosRelatedByUpdatedById()
	{
		$this->collDatoAcademicosRelatedByUpdatedById = array();
	}

	/**
	 * Gets an array of DatoAcademico objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DatoAcademicosRelatedByUpdatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DatoAcademico[]
	 * @throws     PropelException
	 */
	public function getDatoAcademicosRelatedByUpdatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
			   $this->collDatoAcademicosRelatedByUpdatedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

				DatoAcademicoPeer::addSelectColumns($criteria);
				$this->collDatoAcademicosRelatedByUpdatedById = DatoAcademicoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

				DatoAcademicoPeer::addSelectColumns($criteria);
				if (!isset($this->lastDatoAcademicoRelatedByUpdatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$this->collDatoAcademicosRelatedByUpdatedById = DatoAcademicoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria = $criteria;
		return $this->collDatoAcademicosRelatedByUpdatedById;
	}

	/**
	 * Returns the number of related DatoAcademico objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DatoAcademico objects.
	 * @throws     PropelException
	 */
	public function countDatoAcademicosRelatedByUpdatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDatoAcademicosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

				$count = DatoAcademicoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

				if (!isset($this->lastDatoAcademicoRelatedByUpdatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$count = DatoAcademicoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDatoAcademicosRelatedByUpdatedById);
				}
			} else {
				$count = count($this->collDatoAcademicosRelatedByUpdatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DatoAcademico object to this object
	 * through the DatoAcademico foreign key attribute.
	 *
	 * @param      DatoAcademico $l DatoAcademico
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDatoAcademicoRelatedByUpdatedById(DatoAcademico $l)
	{
		if ($this->collDatoAcademicosRelatedByUpdatedById === null) {
			$this->initDatoAcademicosRelatedByUpdatedById();
		}
		if (!in_array($l, $this->collDatoAcademicosRelatedByUpdatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDatoAcademicosRelatedByUpdatedById, $l);
			$l->setsfGuardUserRelatedByUpdatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByUpdatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByUpdatedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByUpdatedById = DatoAcademicoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByUpdatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByUpdatedById = DatoAcademicoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByUpdatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByUpdatedByIdJoinTipoTitulo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByUpdatedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByUpdatedById = DatoAcademicoPeer::doSelectJoinTipoTitulo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByUpdatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByUpdatedById = DatoAcademicoPeer::doSelectJoinTipoTitulo($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByUpdatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByUpdatedByIdJoinNacionalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByUpdatedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByUpdatedById = DatoAcademicoPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByUpdatedByIdCriteria) || !$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByUpdatedById = DatoAcademicoPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByUpdatedById;
	}

	/**
	 * Clears out the collDatoAcademicosRelatedByDeletedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDatoAcademicosRelatedByDeletedById()
	 */
	public function clearDatoAcademicosRelatedByDeletedById()
	{
		$this->collDatoAcademicosRelatedByDeletedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDatoAcademicosRelatedByDeletedById collection (array).
	 *
	 * By default this just sets the collDatoAcademicosRelatedByDeletedById collection to an empty array (like clearcollDatoAcademicosRelatedByDeletedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDatoAcademicosRelatedByDeletedById()
	{
		$this->collDatoAcademicosRelatedByDeletedById = array();
	}

	/**
	 * Gets an array of DatoAcademico objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DatoAcademicosRelatedByDeletedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DatoAcademico[]
	 * @throws     PropelException
	 */
	public function getDatoAcademicosRelatedByDeletedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByDeletedById === null) {
			if ($this->isNew()) {
			   $this->collDatoAcademicosRelatedByDeletedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

				DatoAcademicoPeer::addSelectColumns($criteria);
				$this->collDatoAcademicosRelatedByDeletedById = DatoAcademicoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

				DatoAcademicoPeer::addSelectColumns($criteria);
				if (!isset($this->lastDatoAcademicoRelatedByDeletedByIdCriteria) || !$this->lastDatoAcademicoRelatedByDeletedByIdCriteria->equals($criteria)) {
					$this->collDatoAcademicosRelatedByDeletedById = DatoAcademicoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDatoAcademicoRelatedByDeletedByIdCriteria = $criteria;
		return $this->collDatoAcademicosRelatedByDeletedById;
	}

	/**
	 * Returns the number of related DatoAcademico objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DatoAcademico objects.
	 * @throws     PropelException
	 */
	public function countDatoAcademicosRelatedByDeletedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDatoAcademicosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

				$count = DatoAcademicoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

				if (!isset($this->lastDatoAcademicoRelatedByDeletedByIdCriteria) || !$this->lastDatoAcademicoRelatedByDeletedByIdCriteria->equals($criteria)) {
					$count = DatoAcademicoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDatoAcademicosRelatedByDeletedById);
				}
			} else {
				$count = count($this->collDatoAcademicosRelatedByDeletedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DatoAcademico object to this object
	 * through the DatoAcademico foreign key attribute.
	 *
	 * @param      DatoAcademico $l DatoAcademico
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDatoAcademicoRelatedByDeletedById(DatoAcademico $l)
	{
		if ($this->collDatoAcademicosRelatedByDeletedById === null) {
			$this->initDatoAcademicosRelatedByDeletedById();
		}
		if (!in_array($l, $this->collDatoAcademicosRelatedByDeletedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDatoAcademicosRelatedByDeletedById, $l);
			$l->setsfGuardUserRelatedByDeletedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByDeletedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByDeletedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByDeletedById = DatoAcademicoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByDeletedByIdCriteria) || !$this->lastDatoAcademicoRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByDeletedById = DatoAcademicoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByDeletedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByDeletedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByDeletedByIdJoinTipoTitulo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByDeletedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByDeletedById = DatoAcademicoPeer::doSelectJoinTipoTitulo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByDeletedByIdCriteria) || !$this->lastDatoAcademicoRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByDeletedById = DatoAcademicoPeer::doSelectJoinTipoTitulo($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByDeletedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByDeletedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DatoAcademicosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDatoAcademicosRelatedByDeletedByIdJoinNacionalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDatoAcademicosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collDatoAcademicosRelatedByDeletedById = array();
			} else {

				$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

				$this->collDatoAcademicosRelatedByDeletedById = DatoAcademicoPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DatoAcademicoPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastDatoAcademicoRelatedByDeletedByIdCriteria) || !$this->lastDatoAcademicoRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collDatoAcademicosRelatedByDeletedById = DatoAcademicoPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastDatoAcademicoRelatedByDeletedByIdCriteria = $criteria;

		return $this->collDatoAcademicosRelatedByDeletedById;
	}

	/**
	 * Clears out the collDocentesRelatedByCreatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDocentesRelatedByCreatedById()
	 */
	public function clearDocentesRelatedByCreatedById()
	{
		$this->collDocentesRelatedByCreatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDocentesRelatedByCreatedById collection (array).
	 *
	 * By default this just sets the collDocentesRelatedByCreatedById collection to an empty array (like clearcollDocentesRelatedByCreatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDocentesRelatedByCreatedById()
	{
		$this->collDocentesRelatedByCreatedById = array();
	}

	/**
	 * Gets an array of Docente objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DocentesRelatedByCreatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Docente[]
	 * @throws     PropelException
	 */
	public function getDocentesRelatedByCreatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentesRelatedByCreatedById === null) {
			if ($this->isNew()) {
			   $this->collDocentesRelatedByCreatedById = array();
			} else {

				$criteria->add(DocentePeer::CREATED_BY_ID, $this->id);

				DocentePeer::addSelectColumns($criteria);
				$this->collDocentesRelatedByCreatedById = DocentePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DocentePeer::CREATED_BY_ID, $this->id);

				DocentePeer::addSelectColumns($criteria);
				if (!isset($this->lastDocenteRelatedByCreatedByIdCriteria) || !$this->lastDocenteRelatedByCreatedByIdCriteria->equals($criteria)) {
					$this->collDocentesRelatedByCreatedById = DocentePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDocenteRelatedByCreatedByIdCriteria = $criteria;
		return $this->collDocentesRelatedByCreatedById;
	}

	/**
	 * Returns the number of related Docente objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Docente objects.
	 * @throws     PropelException
	 */
	public function countDocentesRelatedByCreatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDocentesRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DocentePeer::CREATED_BY_ID, $this->id);

				$count = DocentePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DocentePeer::CREATED_BY_ID, $this->id);

				if (!isset($this->lastDocenteRelatedByCreatedByIdCriteria) || !$this->lastDocenteRelatedByCreatedByIdCriteria->equals($criteria)) {
					$count = DocentePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDocentesRelatedByCreatedById);
				}
			} else {
				$count = count($this->collDocentesRelatedByCreatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Docente object to this object
	 * through the Docente foreign key attribute.
	 *
	 * @param      Docente $l Docente
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDocenteRelatedByCreatedById(Docente $l)
	{
		if ($this->collDocentesRelatedByCreatedById === null) {
			$this->initDocentesRelatedByCreatedById();
		}
		if (!in_array($l, $this->collDocentesRelatedByCreatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDocentesRelatedByCreatedById, $l);
			$l->setsfGuardUserRelatedByCreatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DocentesRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDocentesRelatedByCreatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentesRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collDocentesRelatedByCreatedById = array();
			} else {

				$criteria->add(DocentePeer::CREATED_BY_ID, $this->id);

				$this->collDocentesRelatedByCreatedById = DocentePeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocentePeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastDocenteRelatedByCreatedByIdCriteria) || !$this->lastDocenteRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collDocentesRelatedByCreatedById = DocentePeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocenteRelatedByCreatedByIdCriteria = $criteria;

		return $this->collDocentesRelatedByCreatedById;
	}

	/**
	 * Clears out the collDocentesRelatedByUpdatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDocentesRelatedByUpdatedById()
	 */
	public function clearDocentesRelatedByUpdatedById()
	{
		$this->collDocentesRelatedByUpdatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDocentesRelatedByUpdatedById collection (array).
	 *
	 * By default this just sets the collDocentesRelatedByUpdatedById collection to an empty array (like clearcollDocentesRelatedByUpdatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDocentesRelatedByUpdatedById()
	{
		$this->collDocentesRelatedByUpdatedById = array();
	}

	/**
	 * Gets an array of Docente objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DocentesRelatedByUpdatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Docente[]
	 * @throws     PropelException
	 */
	public function getDocentesRelatedByUpdatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentesRelatedByUpdatedById === null) {
			if ($this->isNew()) {
			   $this->collDocentesRelatedByUpdatedById = array();
			} else {

				$criteria->add(DocentePeer::UPDATED_BY_ID, $this->id);

				DocentePeer::addSelectColumns($criteria);
				$this->collDocentesRelatedByUpdatedById = DocentePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DocentePeer::UPDATED_BY_ID, $this->id);

				DocentePeer::addSelectColumns($criteria);
				if (!isset($this->lastDocenteRelatedByUpdatedByIdCriteria) || !$this->lastDocenteRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$this->collDocentesRelatedByUpdatedById = DocentePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDocenteRelatedByUpdatedByIdCriteria = $criteria;
		return $this->collDocentesRelatedByUpdatedById;
	}

	/**
	 * Returns the number of related Docente objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Docente objects.
	 * @throws     PropelException
	 */
	public function countDocentesRelatedByUpdatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDocentesRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DocentePeer::UPDATED_BY_ID, $this->id);

				$count = DocentePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DocentePeer::UPDATED_BY_ID, $this->id);

				if (!isset($this->lastDocenteRelatedByUpdatedByIdCriteria) || !$this->lastDocenteRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$count = DocentePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDocentesRelatedByUpdatedById);
				}
			} else {
				$count = count($this->collDocentesRelatedByUpdatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Docente object to this object
	 * through the Docente foreign key attribute.
	 *
	 * @param      Docente $l Docente
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDocenteRelatedByUpdatedById(Docente $l)
	{
		if ($this->collDocentesRelatedByUpdatedById === null) {
			$this->initDocentesRelatedByUpdatedById();
		}
		if (!in_array($l, $this->collDocentesRelatedByUpdatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDocentesRelatedByUpdatedById, $l);
			$l->setsfGuardUserRelatedByUpdatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DocentesRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDocentesRelatedByUpdatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentesRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collDocentesRelatedByUpdatedById = array();
			} else {

				$criteria->add(DocentePeer::UPDATED_BY_ID, $this->id);

				$this->collDocentesRelatedByUpdatedById = DocentePeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocentePeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastDocenteRelatedByUpdatedByIdCriteria) || !$this->lastDocenteRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collDocentesRelatedByUpdatedById = DocentePeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocenteRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collDocentesRelatedByUpdatedById;
	}

	/**
	 * Clears out the collDocentesRelatedByDeletedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDocentesRelatedByDeletedById()
	 */
	public function clearDocentesRelatedByDeletedById()
	{
		$this->collDocentesRelatedByDeletedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDocentesRelatedByDeletedById collection (array).
	 *
	 * By default this just sets the collDocentesRelatedByDeletedById collection to an empty array (like clearcollDocentesRelatedByDeletedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDocentesRelatedByDeletedById()
	{
		$this->collDocentesRelatedByDeletedById = array();
	}

	/**
	 * Gets an array of Docente objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DocentesRelatedByDeletedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Docente[]
	 * @throws     PropelException
	 */
	public function getDocentesRelatedByDeletedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentesRelatedByDeletedById === null) {
			if ($this->isNew()) {
			   $this->collDocentesRelatedByDeletedById = array();
			} else {

				$criteria->add(DocentePeer::DELETED_BY_ID, $this->id);

				DocentePeer::addSelectColumns($criteria);
				$this->collDocentesRelatedByDeletedById = DocentePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DocentePeer::DELETED_BY_ID, $this->id);

				DocentePeer::addSelectColumns($criteria);
				if (!isset($this->lastDocenteRelatedByDeletedByIdCriteria) || !$this->lastDocenteRelatedByDeletedByIdCriteria->equals($criteria)) {
					$this->collDocentesRelatedByDeletedById = DocentePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDocenteRelatedByDeletedByIdCriteria = $criteria;
		return $this->collDocentesRelatedByDeletedById;
	}

	/**
	 * Returns the number of related Docente objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Docente objects.
	 * @throws     PropelException
	 */
	public function countDocentesRelatedByDeletedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDocentesRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DocentePeer::DELETED_BY_ID, $this->id);

				$count = DocentePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DocentePeer::DELETED_BY_ID, $this->id);

				if (!isset($this->lastDocenteRelatedByDeletedByIdCriteria) || !$this->lastDocenteRelatedByDeletedByIdCriteria->equals($criteria)) {
					$count = DocentePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDocentesRelatedByDeletedById);
				}
			} else {
				$count = count($this->collDocentesRelatedByDeletedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Docente object to this object
	 * through the Docente foreign key attribute.
	 *
	 * @param      Docente $l Docente
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDocenteRelatedByDeletedById(Docente $l)
	{
		if ($this->collDocentesRelatedByDeletedById === null) {
			$this->initDocentesRelatedByDeletedById();
		}
		if (!in_array($l, $this->collDocentesRelatedByDeletedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDocentesRelatedByDeletedById, $l);
			$l->setsfGuardUserRelatedByDeletedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DocentesRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDocentesRelatedByDeletedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocentesRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collDocentesRelatedByDeletedById = array();
			} else {

				$criteria->add(DocentePeer::DELETED_BY_ID, $this->id);

				$this->collDocentesRelatedByDeletedById = DocentePeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocentePeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastDocenteRelatedByDeletedByIdCriteria) || !$this->lastDocenteRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collDocentesRelatedByDeletedById = DocentePeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocenteRelatedByDeletedByIdCriteria = $criteria;

		return $this->collDocentesRelatedByDeletedById;
	}

	/**
	 * Clears out the collDomiciliosRelatedByCreatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDomiciliosRelatedByCreatedById()
	 */
	public function clearDomiciliosRelatedByCreatedById()
	{
		$this->collDomiciliosRelatedByCreatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDomiciliosRelatedByCreatedById collection (array).
	 *
	 * By default this just sets the collDomiciliosRelatedByCreatedById collection to an empty array (like clearcollDomiciliosRelatedByCreatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDomiciliosRelatedByCreatedById()
	{
		$this->collDomiciliosRelatedByCreatedById = array();
	}

	/**
	 * Gets an array of Domicilio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DomiciliosRelatedByCreatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Domicilio[]
	 * @throws     PropelException
	 */
	public function getDomiciliosRelatedByCreatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByCreatedById === null) {
			if ($this->isNew()) {
			   $this->collDomiciliosRelatedByCreatedById = array();
			} else {

				$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

				DomicilioPeer::addSelectColumns($criteria);
				$this->collDomiciliosRelatedByCreatedById = DomicilioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

				DomicilioPeer::addSelectColumns($criteria);
				if (!isset($this->lastDomicilioRelatedByCreatedByIdCriteria) || !$this->lastDomicilioRelatedByCreatedByIdCriteria->equals($criteria)) {
					$this->collDomiciliosRelatedByCreatedById = DomicilioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDomicilioRelatedByCreatedByIdCriteria = $criteria;
		return $this->collDomiciliosRelatedByCreatedById;
	}

	/**
	 * Returns the number of related Domicilio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Domicilio objects.
	 * @throws     PropelException
	 */
	public function countDomiciliosRelatedByCreatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDomiciliosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

				$count = DomicilioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

				if (!isset($this->lastDomicilioRelatedByCreatedByIdCriteria) || !$this->lastDomicilioRelatedByCreatedByIdCriteria->equals($criteria)) {
					$count = DomicilioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDomiciliosRelatedByCreatedById);
				}
			} else {
				$count = count($this->collDomiciliosRelatedByCreatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Domicilio object to this object
	 * through the Domicilio foreign key attribute.
	 *
	 * @param      Domicilio $l Domicilio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDomicilioRelatedByCreatedById(Domicilio $l)
	{
		if ($this->collDomiciliosRelatedByCreatedById === null) {
			$this->initDomiciliosRelatedByCreatedById();
		}
		if (!in_array($l, $this->collDomiciliosRelatedByCreatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDomiciliosRelatedByCreatedById, $l);
			$l->setsfGuardUserRelatedByCreatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByCreatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByCreatedById = array();
			} else {

				$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByCreatedById = DomicilioPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByCreatedByIdCriteria) || !$this->lastDomicilioRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByCreatedById = DomicilioPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByCreatedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByCreatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByCreatedByIdJoinProvincia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByCreatedById = array();
			} else {

				$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByCreatedById = DomicilioPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByCreatedByIdCriteria) || !$this->lastDomicilioRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByCreatedById = DomicilioPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByCreatedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByCreatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByCreatedByIdJoinLocalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByCreatedById = array();
			} else {

				$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByCreatedById = DomicilioPeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByCreatedByIdCriteria) || !$this->lastDomicilioRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByCreatedById = DomicilioPeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByCreatedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByCreatedById;
	}

	/**
	 * Clears out the collDomiciliosRelatedByUpdatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDomiciliosRelatedByUpdatedById()
	 */
	public function clearDomiciliosRelatedByUpdatedById()
	{
		$this->collDomiciliosRelatedByUpdatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDomiciliosRelatedByUpdatedById collection (array).
	 *
	 * By default this just sets the collDomiciliosRelatedByUpdatedById collection to an empty array (like clearcollDomiciliosRelatedByUpdatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDomiciliosRelatedByUpdatedById()
	{
		$this->collDomiciliosRelatedByUpdatedById = array();
	}

	/**
	 * Gets an array of Domicilio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DomiciliosRelatedByUpdatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Domicilio[]
	 * @throws     PropelException
	 */
	public function getDomiciliosRelatedByUpdatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
			   $this->collDomiciliosRelatedByUpdatedById = array();
			} else {

				$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

				DomicilioPeer::addSelectColumns($criteria);
				$this->collDomiciliosRelatedByUpdatedById = DomicilioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

				DomicilioPeer::addSelectColumns($criteria);
				if (!isset($this->lastDomicilioRelatedByUpdatedByIdCriteria) || !$this->lastDomicilioRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$this->collDomiciliosRelatedByUpdatedById = DomicilioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDomicilioRelatedByUpdatedByIdCriteria = $criteria;
		return $this->collDomiciliosRelatedByUpdatedById;
	}

	/**
	 * Returns the number of related Domicilio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Domicilio objects.
	 * @throws     PropelException
	 */
	public function countDomiciliosRelatedByUpdatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDomiciliosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

				$count = DomicilioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

				if (!isset($this->lastDomicilioRelatedByUpdatedByIdCriteria) || !$this->lastDomicilioRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$count = DomicilioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDomiciliosRelatedByUpdatedById);
				}
			} else {
				$count = count($this->collDomiciliosRelatedByUpdatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Domicilio object to this object
	 * through the Domicilio foreign key attribute.
	 *
	 * @param      Domicilio $l Domicilio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDomicilioRelatedByUpdatedById(Domicilio $l)
	{
		if ($this->collDomiciliosRelatedByUpdatedById === null) {
			$this->initDomiciliosRelatedByUpdatedById();
		}
		if (!in_array($l, $this->collDomiciliosRelatedByUpdatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDomiciliosRelatedByUpdatedById, $l);
			$l->setsfGuardUserRelatedByUpdatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByUpdatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByUpdatedById = array();
			} else {

				$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByUpdatedById = DomicilioPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByUpdatedByIdCriteria) || !$this->lastDomicilioRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByUpdatedById = DomicilioPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByUpdatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByUpdatedByIdJoinProvincia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByUpdatedById = array();
			} else {

				$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByUpdatedById = DomicilioPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByUpdatedByIdCriteria) || !$this->lastDomicilioRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByUpdatedById = DomicilioPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByUpdatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByUpdatedByIdJoinLocalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByUpdatedById = array();
			} else {

				$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByUpdatedById = DomicilioPeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByUpdatedByIdCriteria) || !$this->lastDomicilioRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByUpdatedById = DomicilioPeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByUpdatedById;
	}

	/**
	 * Clears out the collDomiciliosRelatedByDeletedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDomiciliosRelatedByDeletedById()
	 */
	public function clearDomiciliosRelatedByDeletedById()
	{
		$this->collDomiciliosRelatedByDeletedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDomiciliosRelatedByDeletedById collection (array).
	 *
	 * By default this just sets the collDomiciliosRelatedByDeletedById collection to an empty array (like clearcollDomiciliosRelatedByDeletedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDomiciliosRelatedByDeletedById()
	{
		$this->collDomiciliosRelatedByDeletedById = array();
	}

	/**
	 * Gets an array of Domicilio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related DomiciliosRelatedByDeletedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Domicilio[]
	 * @throws     PropelException
	 */
	public function getDomiciliosRelatedByDeletedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByDeletedById === null) {
			if ($this->isNew()) {
			   $this->collDomiciliosRelatedByDeletedById = array();
			} else {

				$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

				DomicilioPeer::addSelectColumns($criteria);
				$this->collDomiciliosRelatedByDeletedById = DomicilioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

				DomicilioPeer::addSelectColumns($criteria);
				if (!isset($this->lastDomicilioRelatedByDeletedByIdCriteria) || !$this->lastDomicilioRelatedByDeletedByIdCriteria->equals($criteria)) {
					$this->collDomiciliosRelatedByDeletedById = DomicilioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDomicilioRelatedByDeletedByIdCriteria = $criteria;
		return $this->collDomiciliosRelatedByDeletedById;
	}

	/**
	 * Returns the number of related Domicilio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Domicilio objects.
	 * @throws     PropelException
	 */
	public function countDomiciliosRelatedByDeletedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDomiciliosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

				$count = DomicilioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

				if (!isset($this->lastDomicilioRelatedByDeletedByIdCriteria) || !$this->lastDomicilioRelatedByDeletedByIdCriteria->equals($criteria)) {
					$count = DomicilioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDomiciliosRelatedByDeletedById);
				}
			} else {
				$count = count($this->collDomiciliosRelatedByDeletedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Domicilio object to this object
	 * through the Domicilio foreign key attribute.
	 *
	 * @param      Domicilio $l Domicilio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDomicilioRelatedByDeletedById(Domicilio $l)
	{
		if ($this->collDomiciliosRelatedByDeletedById === null) {
			$this->initDomiciliosRelatedByDeletedById();
		}
		if (!in_array($l, $this->collDomiciliosRelatedByDeletedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDomiciliosRelatedByDeletedById, $l);
			$l->setsfGuardUserRelatedByDeletedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByDeletedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByDeletedById = array();
			} else {

				$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByDeletedById = DomicilioPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByDeletedByIdCriteria) || !$this->lastDomicilioRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByDeletedById = DomicilioPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByDeletedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByDeletedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByDeletedByIdJoinProvincia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByDeletedById = array();
			} else {

				$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByDeletedById = DomicilioPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByDeletedByIdCriteria) || !$this->lastDomicilioRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByDeletedById = DomicilioPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByDeletedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByDeletedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related DomiciliosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getDomiciliosRelatedByDeletedByIdJoinLocalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDomiciliosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collDomiciliosRelatedByDeletedById = array();
			} else {

				$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

				$this->collDomiciliosRelatedByDeletedById = DomicilioPeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DomicilioPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastDomicilioRelatedByDeletedByIdCriteria) || !$this->lastDomicilioRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collDomiciliosRelatedByDeletedById = DomicilioPeer::doSelectJoinLocalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastDomicilioRelatedByDeletedByIdCriteria = $criteria;

		return $this->collDomiciliosRelatedByDeletedById;
	}

	/**
	 * Clears out the collEmpleosRelatedByCreatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpleosRelatedByCreatedById()
	 */
	public function clearEmpleosRelatedByCreatedById()
	{
		$this->collEmpleosRelatedByCreatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpleosRelatedByCreatedById collection (array).
	 *
	 * By default this just sets the collEmpleosRelatedByCreatedById collection to an empty array (like clearcollEmpleosRelatedByCreatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpleosRelatedByCreatedById()
	{
		$this->collEmpleosRelatedByCreatedById = array();
	}

	/**
	 * Gets an array of Empleo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related EmpleosRelatedByCreatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empleo[]
	 * @throws     PropelException
	 */
	public function getEmpleosRelatedByCreatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByCreatedById === null) {
			if ($this->isNew()) {
			   $this->collEmpleosRelatedByCreatedById = array();
			} else {

				$criteria->add(EmpleoPeer::CREATED_BY_ID, $this->id);

				EmpleoPeer::addSelectColumns($criteria);
				$this->collEmpleosRelatedByCreatedById = EmpleoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpleoPeer::CREATED_BY_ID, $this->id);

				EmpleoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpleoRelatedByCreatedByIdCriteria) || !$this->lastEmpleoRelatedByCreatedByIdCriteria->equals($criteria)) {
					$this->collEmpleosRelatedByCreatedById = EmpleoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpleoRelatedByCreatedByIdCriteria = $criteria;
		return $this->collEmpleosRelatedByCreatedById;
	}

	/**
	 * Returns the number of related Empleo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empleo objects.
	 * @throws     PropelException
	 */
	public function countEmpleosRelatedByCreatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpleosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpleoPeer::CREATED_BY_ID, $this->id);

				$count = EmpleoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpleoPeer::CREATED_BY_ID, $this->id);

				if (!isset($this->lastEmpleoRelatedByCreatedByIdCriteria) || !$this->lastEmpleoRelatedByCreatedByIdCriteria->equals($criteria)) {
					$count = EmpleoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpleosRelatedByCreatedById);
				}
			} else {
				$count = count($this->collEmpleosRelatedByCreatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empleo object to this object
	 * through the Empleo foreign key attribute.
	 *
	 * @param      Empleo $l Empleo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpleoRelatedByCreatedById(Empleo $l)
	{
		if ($this->collEmpleosRelatedByCreatedById === null) {
			$this->initEmpleosRelatedByCreatedById();
		}
		if (!in_array($l, $this->collEmpleosRelatedByCreatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpleosRelatedByCreatedById, $l);
			$l->setsfGuardUserRelatedByCreatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related EmpleosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getEmpleosRelatedByCreatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collEmpleosRelatedByCreatedById = array();
			} else {

				$criteria->add(EmpleoPeer::CREATED_BY_ID, $this->id);

				$this->collEmpleosRelatedByCreatedById = EmpleoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastEmpleoRelatedByCreatedByIdCriteria) || !$this->lastEmpleoRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collEmpleosRelatedByCreatedById = EmpleoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoRelatedByCreatedByIdCriteria = $criteria;

		return $this->collEmpleosRelatedByCreatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related EmpleosRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getEmpleosRelatedByCreatedByIdJoinTipoEmpleo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collEmpleosRelatedByCreatedById = array();
			} else {

				$criteria->add(EmpleoPeer::CREATED_BY_ID, $this->id);

				$this->collEmpleosRelatedByCreatedById = EmpleoPeer::doSelectJoinTipoEmpleo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastEmpleoRelatedByCreatedByIdCriteria) || !$this->lastEmpleoRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collEmpleosRelatedByCreatedById = EmpleoPeer::doSelectJoinTipoEmpleo($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoRelatedByCreatedByIdCriteria = $criteria;

		return $this->collEmpleosRelatedByCreatedById;
	}

	/**
	 * Clears out the collEmpleosRelatedByUpdatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpleosRelatedByUpdatedById()
	 */
	public function clearEmpleosRelatedByUpdatedById()
	{
		$this->collEmpleosRelatedByUpdatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpleosRelatedByUpdatedById collection (array).
	 *
	 * By default this just sets the collEmpleosRelatedByUpdatedById collection to an empty array (like clearcollEmpleosRelatedByUpdatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpleosRelatedByUpdatedById()
	{
		$this->collEmpleosRelatedByUpdatedById = array();
	}

	/**
	 * Gets an array of Empleo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related EmpleosRelatedByUpdatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empleo[]
	 * @throws     PropelException
	 */
	public function getEmpleosRelatedByUpdatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
			   $this->collEmpleosRelatedByUpdatedById = array();
			} else {

				$criteria->add(EmpleoPeer::UPDATED_BY_ID, $this->id);

				EmpleoPeer::addSelectColumns($criteria);
				$this->collEmpleosRelatedByUpdatedById = EmpleoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpleoPeer::UPDATED_BY_ID, $this->id);

				EmpleoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpleoRelatedByUpdatedByIdCriteria) || !$this->lastEmpleoRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$this->collEmpleosRelatedByUpdatedById = EmpleoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpleoRelatedByUpdatedByIdCriteria = $criteria;
		return $this->collEmpleosRelatedByUpdatedById;
	}

	/**
	 * Returns the number of related Empleo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empleo objects.
	 * @throws     PropelException
	 */
	public function countEmpleosRelatedByUpdatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpleosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpleoPeer::UPDATED_BY_ID, $this->id);

				$count = EmpleoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpleoPeer::UPDATED_BY_ID, $this->id);

				if (!isset($this->lastEmpleoRelatedByUpdatedByIdCriteria) || !$this->lastEmpleoRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$count = EmpleoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpleosRelatedByUpdatedById);
				}
			} else {
				$count = count($this->collEmpleosRelatedByUpdatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empleo object to this object
	 * through the Empleo foreign key attribute.
	 *
	 * @param      Empleo $l Empleo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpleoRelatedByUpdatedById(Empleo $l)
	{
		if ($this->collEmpleosRelatedByUpdatedById === null) {
			$this->initEmpleosRelatedByUpdatedById();
		}
		if (!in_array($l, $this->collEmpleosRelatedByUpdatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpleosRelatedByUpdatedById, $l);
			$l->setsfGuardUserRelatedByUpdatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related EmpleosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getEmpleosRelatedByUpdatedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collEmpleosRelatedByUpdatedById = array();
			} else {

				$criteria->add(EmpleoPeer::UPDATED_BY_ID, $this->id);

				$this->collEmpleosRelatedByUpdatedById = EmpleoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastEmpleoRelatedByUpdatedByIdCriteria) || !$this->lastEmpleoRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collEmpleosRelatedByUpdatedById = EmpleoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collEmpleosRelatedByUpdatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related EmpleosRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getEmpleosRelatedByUpdatedByIdJoinTipoEmpleo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collEmpleosRelatedByUpdatedById = array();
			} else {

				$criteria->add(EmpleoPeer::UPDATED_BY_ID, $this->id);

				$this->collEmpleosRelatedByUpdatedById = EmpleoPeer::doSelectJoinTipoEmpleo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastEmpleoRelatedByUpdatedByIdCriteria) || !$this->lastEmpleoRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collEmpleosRelatedByUpdatedById = EmpleoPeer::doSelectJoinTipoEmpleo($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collEmpleosRelatedByUpdatedById;
	}

	/**
	 * Clears out the collEmpleosRelatedByDeletedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpleosRelatedByDeletedById()
	 */
	public function clearEmpleosRelatedByDeletedById()
	{
		$this->collEmpleosRelatedByDeletedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpleosRelatedByDeletedById collection (array).
	 *
	 * By default this just sets the collEmpleosRelatedByDeletedById collection to an empty array (like clearcollEmpleosRelatedByDeletedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpleosRelatedByDeletedById()
	{
		$this->collEmpleosRelatedByDeletedById = array();
	}

	/**
	 * Gets an array of Empleo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related EmpleosRelatedByDeletedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empleo[]
	 * @throws     PropelException
	 */
	public function getEmpleosRelatedByDeletedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByDeletedById === null) {
			if ($this->isNew()) {
			   $this->collEmpleosRelatedByDeletedById = array();
			} else {

				$criteria->add(EmpleoPeer::DELETED_BY_ID, $this->id);

				EmpleoPeer::addSelectColumns($criteria);
				$this->collEmpleosRelatedByDeletedById = EmpleoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpleoPeer::DELETED_BY_ID, $this->id);

				EmpleoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpleoRelatedByDeletedByIdCriteria) || !$this->lastEmpleoRelatedByDeletedByIdCriteria->equals($criteria)) {
					$this->collEmpleosRelatedByDeletedById = EmpleoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpleoRelatedByDeletedByIdCriteria = $criteria;
		return $this->collEmpleosRelatedByDeletedById;
	}

	/**
	 * Returns the number of related Empleo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empleo objects.
	 * @throws     PropelException
	 */
	public function countEmpleosRelatedByDeletedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpleosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpleoPeer::DELETED_BY_ID, $this->id);

				$count = EmpleoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpleoPeer::DELETED_BY_ID, $this->id);

				if (!isset($this->lastEmpleoRelatedByDeletedByIdCriteria) || !$this->lastEmpleoRelatedByDeletedByIdCriteria->equals($criteria)) {
					$count = EmpleoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEmpleosRelatedByDeletedById);
				}
			} else {
				$count = count($this->collEmpleosRelatedByDeletedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empleo object to this object
	 * through the Empleo foreign key attribute.
	 *
	 * @param      Empleo $l Empleo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpleoRelatedByDeletedById(Empleo $l)
	{
		if ($this->collEmpleosRelatedByDeletedById === null) {
			$this->initEmpleosRelatedByDeletedById();
		}
		if (!in_array($l, $this->collEmpleosRelatedByDeletedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpleosRelatedByDeletedById, $l);
			$l->setsfGuardUserRelatedByDeletedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related EmpleosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getEmpleosRelatedByDeletedByIdJoinPersona($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collEmpleosRelatedByDeletedById = array();
			} else {

				$criteria->add(EmpleoPeer::DELETED_BY_ID, $this->id);

				$this->collEmpleosRelatedByDeletedById = EmpleoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastEmpleoRelatedByDeletedByIdCriteria) || !$this->lastEmpleoRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collEmpleosRelatedByDeletedById = EmpleoPeer::doSelectJoinPersona($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoRelatedByDeletedByIdCriteria = $criteria;

		return $this->collEmpleosRelatedByDeletedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related EmpleosRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getEmpleosRelatedByDeletedByIdJoinTipoEmpleo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpleosRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collEmpleosRelatedByDeletedById = array();
			} else {

				$criteria->add(EmpleoPeer::DELETED_BY_ID, $this->id);

				$this->collEmpleosRelatedByDeletedById = EmpleoPeer::doSelectJoinTipoEmpleo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpleoPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastEmpleoRelatedByDeletedByIdCriteria) || !$this->lastEmpleoRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collEmpleosRelatedByDeletedById = EmpleoPeer::doSelectJoinTipoEmpleo($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpleoRelatedByDeletedByIdCriteria = $criteria;

		return $this->collEmpleosRelatedByDeletedById;
	}

	/**
	 * Clears out the collPersonasRelatedByCreatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPersonasRelatedByCreatedById()
	 */
	public function clearPersonasRelatedByCreatedById()
	{
		$this->collPersonasRelatedByCreatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPersonasRelatedByCreatedById collection (array).
	 *
	 * By default this just sets the collPersonasRelatedByCreatedById collection to an empty array (like clearcollPersonasRelatedByCreatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPersonasRelatedByCreatedById()
	{
		$this->collPersonasRelatedByCreatedById = array();
	}

	/**
	 * Gets an array of Persona objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related PersonasRelatedByCreatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Persona[]
	 * @throws     PropelException
	 */
	public function getPersonasRelatedByCreatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByCreatedById === null) {
			if ($this->isNew()) {
			   $this->collPersonasRelatedByCreatedById = array();
			} else {

				$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

				PersonaPeer::addSelectColumns($criteria);
				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

				PersonaPeer::addSelectColumns($criteria);
				if (!isset($this->lastPersonaRelatedByCreatedByIdCriteria) || !$this->lastPersonaRelatedByCreatedByIdCriteria->equals($criteria)) {
					$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPersonaRelatedByCreatedByIdCriteria = $criteria;
		return $this->collPersonasRelatedByCreatedById;
	}

	/**
	 * Returns the number of related Persona objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Persona objects.
	 * @throws     PropelException
	 */
	public function countPersonasRelatedByCreatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPersonasRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

				$count = PersonaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

				if (!isset($this->lastPersonaRelatedByCreatedByIdCriteria) || !$this->lastPersonaRelatedByCreatedByIdCriteria->equals($criteria)) {
					$count = PersonaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPersonasRelatedByCreatedById);
				}
			} else {
				$count = count($this->collPersonasRelatedByCreatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Persona object to this object
	 * through the Persona foreign key attribute.
	 *
	 * @param      Persona $l Persona
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPersonaRelatedByCreatedById(Persona $l)
	{
		if ($this->collPersonasRelatedByCreatedById === null) {
			$this->initPersonasRelatedByCreatedById();
		}
		if (!in_array($l, $this->collPersonasRelatedByCreatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPersonasRelatedByCreatedById, $l);
			$l->setsfGuardUserRelatedByCreatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByCreatedByIdJoinTipoDocumento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByCreatedById = array();
			} else {

				$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelectJoinTipoDocumento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByCreatedByIdCriteria) || !$this->lastPersonaRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelectJoinTipoDocumento($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByCreatedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByCreatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByCreatedByIdJoinTipoSexo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByCreatedById = array();
			} else {

				$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelectJoinTipoSexo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByCreatedByIdCriteria) || !$this->lastPersonaRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelectJoinTipoSexo($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByCreatedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByCreatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByCreatedByIdJoinNacionalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByCreatedById = array();
			} else {

				$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByCreatedByIdCriteria) || !$this->lastPersonaRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByCreatedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByCreatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByCreatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByCreatedByIdJoinEstadoCivil($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByCreatedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByCreatedById = array();
			} else {

				$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelectJoinEstadoCivil($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::CREATED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByCreatedByIdCriteria) || !$this->lastPersonaRelatedByCreatedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByCreatedById = PersonaPeer::doSelectJoinEstadoCivil($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByCreatedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByCreatedById;
	}

	/**
	 * Clears out the collPersonasRelatedByUpdatedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPersonasRelatedByUpdatedById()
	 */
	public function clearPersonasRelatedByUpdatedById()
	{
		$this->collPersonasRelatedByUpdatedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPersonasRelatedByUpdatedById collection (array).
	 *
	 * By default this just sets the collPersonasRelatedByUpdatedById collection to an empty array (like clearcollPersonasRelatedByUpdatedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPersonasRelatedByUpdatedById()
	{
		$this->collPersonasRelatedByUpdatedById = array();
	}

	/**
	 * Gets an array of Persona objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related PersonasRelatedByUpdatedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Persona[]
	 * @throws     PropelException
	 */
	public function getPersonasRelatedByUpdatedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByUpdatedById === null) {
			if ($this->isNew()) {
			   $this->collPersonasRelatedByUpdatedById = array();
			} else {

				$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

				PersonaPeer::addSelectColumns($criteria);
				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

				PersonaPeer::addSelectColumns($criteria);
				if (!isset($this->lastPersonaRelatedByUpdatedByIdCriteria) || !$this->lastPersonaRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPersonaRelatedByUpdatedByIdCriteria = $criteria;
		return $this->collPersonasRelatedByUpdatedById;
	}

	/**
	 * Returns the number of related Persona objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Persona objects.
	 * @throws     PropelException
	 */
	public function countPersonasRelatedByUpdatedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPersonasRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

				$count = PersonaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

				if (!isset($this->lastPersonaRelatedByUpdatedByIdCriteria) || !$this->lastPersonaRelatedByUpdatedByIdCriteria->equals($criteria)) {
					$count = PersonaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPersonasRelatedByUpdatedById);
				}
			} else {
				$count = count($this->collPersonasRelatedByUpdatedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Persona object to this object
	 * through the Persona foreign key attribute.
	 *
	 * @param      Persona $l Persona
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPersonaRelatedByUpdatedById(Persona $l)
	{
		if ($this->collPersonasRelatedByUpdatedById === null) {
			$this->initPersonasRelatedByUpdatedById();
		}
		if (!in_array($l, $this->collPersonasRelatedByUpdatedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPersonasRelatedByUpdatedById, $l);
			$l->setsfGuardUserRelatedByUpdatedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByUpdatedByIdJoinTipoDocumento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByUpdatedById = array();
			} else {

				$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelectJoinTipoDocumento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByUpdatedByIdCriteria) || !$this->lastPersonaRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelectJoinTipoDocumento($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByUpdatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByUpdatedByIdJoinTipoSexo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByUpdatedById = array();
			} else {

				$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelectJoinTipoSexo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByUpdatedByIdCriteria) || !$this->lastPersonaRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelectJoinTipoSexo($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByUpdatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByUpdatedByIdJoinNacionalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByUpdatedById = array();
			} else {

				$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByUpdatedByIdCriteria) || !$this->lastPersonaRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByUpdatedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByUpdatedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByUpdatedByIdJoinEstadoCivil($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByUpdatedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByUpdatedById = array();
			} else {

				$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelectJoinEstadoCivil($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::UPDATED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByUpdatedByIdCriteria) || !$this->lastPersonaRelatedByUpdatedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByUpdatedById = PersonaPeer::doSelectJoinEstadoCivil($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByUpdatedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByUpdatedById;
	}

	/**
	 * Clears out the collPersonasRelatedByDeletedById collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPersonasRelatedByDeletedById()
	 */
	public function clearPersonasRelatedByDeletedById()
	{
		$this->collPersonasRelatedByDeletedById = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPersonasRelatedByDeletedById collection (array).
	 *
	 * By default this just sets the collPersonasRelatedByDeletedById collection to an empty array (like clearcollPersonasRelatedByDeletedById());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPersonasRelatedByDeletedById()
	{
		$this->collPersonasRelatedByDeletedById = array();
	}

	/**
	 * Gets an array of Persona objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related PersonasRelatedByDeletedById from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Persona[]
	 * @throws     PropelException
	 */
	public function getPersonasRelatedByDeletedById($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByDeletedById === null) {
			if ($this->isNew()) {
			   $this->collPersonasRelatedByDeletedById = array();
			} else {

				$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

				PersonaPeer::addSelectColumns($criteria);
				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

				PersonaPeer::addSelectColumns($criteria);
				if (!isset($this->lastPersonaRelatedByDeletedByIdCriteria) || !$this->lastPersonaRelatedByDeletedByIdCriteria->equals($criteria)) {
					$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPersonaRelatedByDeletedByIdCriteria = $criteria;
		return $this->collPersonasRelatedByDeletedById;
	}

	/**
	 * Returns the number of related Persona objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Persona objects.
	 * @throws     PropelException
	 */
	public function countPersonasRelatedByDeletedById(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPersonasRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

				$count = PersonaPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

				if (!isset($this->lastPersonaRelatedByDeletedByIdCriteria) || !$this->lastPersonaRelatedByDeletedByIdCriteria->equals($criteria)) {
					$count = PersonaPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPersonasRelatedByDeletedById);
				}
			} else {
				$count = count($this->collPersonasRelatedByDeletedById);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Persona object to this object
	 * through the Persona foreign key attribute.
	 *
	 * @param      Persona $l Persona
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPersonaRelatedByDeletedById(Persona $l)
	{
		if ($this->collPersonasRelatedByDeletedById === null) {
			$this->initPersonasRelatedByDeletedById();
		}
		if (!in_array($l, $this->collPersonasRelatedByDeletedById, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPersonasRelatedByDeletedById, $l);
			$l->setsfGuardUserRelatedByDeletedById($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByDeletedByIdJoinTipoDocumento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByDeletedById = array();
			} else {

				$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelectJoinTipoDocumento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByDeletedByIdCriteria) || !$this->lastPersonaRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelectJoinTipoDocumento($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByDeletedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByDeletedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByDeletedByIdJoinTipoSexo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByDeletedById = array();
			} else {

				$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelectJoinTipoSexo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByDeletedByIdCriteria) || !$this->lastPersonaRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelectJoinTipoSexo($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByDeletedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByDeletedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByDeletedByIdJoinNacionalidad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByDeletedById = array();
			} else {

				$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByDeletedByIdCriteria) || !$this->lastPersonaRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelectJoinNacionalidad($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByDeletedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByDeletedById;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related PersonasRelatedByDeletedById from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getPersonasRelatedByDeletedByIdJoinEstadoCivil($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonasRelatedByDeletedById === null) {
			if ($this->isNew()) {
				$this->collPersonasRelatedByDeletedById = array();
			} else {

				$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelectJoinEstadoCivil($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonaPeer::DELETED_BY_ID, $this->id);

			if (!isset($this->lastPersonaRelatedByDeletedByIdCriteria) || !$this->lastPersonaRelatedByDeletedByIdCriteria->equals($criteria)) {
				$this->collPersonasRelatedByDeletedById = PersonaPeer::doSelectJoinEstadoCivil($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonaRelatedByDeletedByIdCriteria = $criteria;

		return $this->collPersonasRelatedByDeletedById;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collsfGuardUserPermissions) {
				foreach ((array) $this->collsfGuardUserPermissions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardUserGroups) {
				foreach ((array) $this->collsfGuardUserGroups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardRememberKeys) {
				foreach ((array) $this->collsfGuardRememberKeys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlumnosRelatedByCreatedById) {
				foreach ((array) $this->collAlumnosRelatedByCreatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlumnosRelatedByUpdatedById) {
				foreach ((array) $this->collAlumnosRelatedByUpdatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlumnosRelatedByDeletedById) {
				foreach ((array) $this->collAlumnosRelatedByDeletedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCarrerasRelatedByCreatedById) {
				foreach ((array) $this->collCarrerasRelatedByCreatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCarrerasRelatedByUpdatedById) {
				foreach ((array) $this->collCarrerasRelatedByUpdatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCarrerasRelatedByDeletedById) {
				foreach ((array) $this->collCarrerasRelatedByDeletedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDatoAcademicosRelatedByCreatedById) {
				foreach ((array) $this->collDatoAcademicosRelatedByCreatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDatoAcademicosRelatedByUpdatedById) {
				foreach ((array) $this->collDatoAcademicosRelatedByUpdatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDatoAcademicosRelatedByDeletedById) {
				foreach ((array) $this->collDatoAcademicosRelatedByDeletedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDocentesRelatedByCreatedById) {
				foreach ((array) $this->collDocentesRelatedByCreatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDocentesRelatedByUpdatedById) {
				foreach ((array) $this->collDocentesRelatedByUpdatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDocentesRelatedByDeletedById) {
				foreach ((array) $this->collDocentesRelatedByDeletedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDomiciliosRelatedByCreatedById) {
				foreach ((array) $this->collDomiciliosRelatedByCreatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDomiciliosRelatedByUpdatedById) {
				foreach ((array) $this->collDomiciliosRelatedByUpdatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDomiciliosRelatedByDeletedById) {
				foreach ((array) $this->collDomiciliosRelatedByDeletedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpleosRelatedByCreatedById) {
				foreach ((array) $this->collEmpleosRelatedByCreatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpleosRelatedByUpdatedById) {
				foreach ((array) $this->collEmpleosRelatedByUpdatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpleosRelatedByDeletedById) {
				foreach ((array) $this->collEmpleosRelatedByDeletedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPersonasRelatedByCreatedById) {
				foreach ((array) $this->collPersonasRelatedByCreatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPersonasRelatedByUpdatedById) {
				foreach ((array) $this->collPersonasRelatedByUpdatedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPersonasRelatedByDeletedById) {
				foreach ((array) $this->collPersonasRelatedByDeletedById as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collsfGuardUserPermissions = null;
		$this->collsfGuardUserGroups = null;
		$this->collsfGuardRememberKeys = null;
		$this->collAlumnosRelatedByCreatedById = null;
		$this->collAlumnosRelatedByUpdatedById = null;
		$this->collAlumnosRelatedByDeletedById = null;
		$this->collCarrerasRelatedByCreatedById = null;
		$this->collCarrerasRelatedByUpdatedById = null;
		$this->collCarrerasRelatedByDeletedById = null;
		$this->collDatoAcademicosRelatedByCreatedById = null;
		$this->collDatoAcademicosRelatedByUpdatedById = null;
		$this->collDatoAcademicosRelatedByDeletedById = null;
		$this->collDocentesRelatedByCreatedById = null;
		$this->collDocentesRelatedByUpdatedById = null;
		$this->collDocentesRelatedByDeletedById = null;
		$this->collDomiciliosRelatedByCreatedById = null;
		$this->collDomiciliosRelatedByUpdatedById = null;
		$this->collDomiciliosRelatedByDeletedById = null;
		$this->collEmpleosRelatedByCreatedById = null;
		$this->collEmpleosRelatedByUpdatedById = null;
		$this->collEmpleosRelatedByDeletedById = null;
		$this->collPersonasRelatedByCreatedById = null;
		$this->collPersonasRelatedByUpdatedById = null;
		$this->collPersonasRelatedByDeletedById = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasesfGuardUser:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasesfGuardUser::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasesfGuardUser
